<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/build.gradle.kts" />
              <option name="originalContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;    id(&quot;androidx.navigation.safeargs.kotlin&quot;)&#10;    id(&quot;com.google.dagger.hilt.android&quot;)&#10;    id(&quot;org.jetbrains.kotlin.kapt&quot;)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.example.ecommerce&quot;&#10;    compileSdk = 36&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.example.ecommerce&quot;&#10;        minSdk = 34&#10;        targetSdk = 36&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;        testInstrumentationRunner = &quot;com.example.ecommerce.HiltTestRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;), &quot;proguard-rules.pro&quot;)&#10;        }&#10;    }&#10;&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;    }&#10;    buildFeatures {&#10;        viewBinding = true&#10;    }&#10;}&#10;&#10;dependencies {&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.appcompat)&#10;    implementation(libs.material)&#10;    implementation(libs.androidx.activity)&#10;    implementation(libs.androidx.constraintlayout)&#10;    implementation(libs.room.runtime)&#10;    implementation(libs.room.ktx)&#10;    kapt(libs.room.compiler)&#10;    implementation(libs.datastore.preferences)&#10;    implementation(libs.datastore.core)&#10;    implementation(libs.retrofit)&#10;    implementation(libs.retrofit.gson)&#10;    implementation(libs.okhttp)&#10;    implementation(libs.okhttp.logging)&#10;    implementation(libs.lifecycle.viewmodel)&#10;    implementation(libs.lifecycle.livedata)&#10;    implementation(libs.lifecycle.runtime)&#10;    implementation(libs.navigation.fragment)&#10;    implementation(libs.navigation.ui)&#10;    implementation(&quot;com.google.dagger:hilt-android:2.48&quot;)&#10;    kapt(&quot;com.google.dagger:hilt-compiler:2.48&quot;)&#10;    implementation(&quot;androidx.hilt:hilt-navigation-fragment:1.2.0&quot;)&#10;    implementation(&quot;io.coil-kt:coil:2.7.0&quot;)&#10;&#10;    kapt(&quot;androidx.hilt:hilt-compiler:1.2.0&quot;)&#10;&#10;    // Unit test dependencies&#10;    testImplementation(libs.junit)&#10;    testImplementation(&quot;org.mockito:mockito-core:5.14.0&quot;)&#10;    testImplementation(&quot;org.mockito.kotlin:mockito-kotlin:5.4.0&quot;)&#10;    testImplementation(&quot;org.jetbrains.kotlinx:kotlinx-coroutines-test:1.9.0&quot;)&#10;    testImplementation(&quot;androidx.test:core:1.6.1&quot;)&#10;    testImplementation(&quot;androidx.test.ext:junit:1.2.1&quot;)&#10;    testImplementation(&quot;com.squareup.okhttp3:mockwebserver:4.12.0&quot;)&#10;    testImplementation(&quot;androidx.room:room-testing:2.6.1&quot;)&#10;    testImplementation(&quot;com.google.code.gson:gson:2.11.0&quot;)&#10;    testImplementation(&quot;com.google.dagger:hilt-android-testing:2.48&quot;)&#10;    kaptTest(&quot;com.google.dagger:hilt-compiler:2.48&quot;)&#10;    testImplementation(&quot;org.jetbrains.kotlin:kotlin-test:1.9.24&quot;)&#10;&#10;    androidTestImplementation(&quot;com.google.dagger:hilt-android-testing:2.48&quot;)&#10;    kaptAndroidTest(&quot;com.google.dagger:hilt-compiler:2.48&quot;)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(&quot;androidx.test.espresso:espresso-core:3.6.1&quot;)&#10;    androidTestImplementation(&quot;androidx.test:runner:1.6.2&quot;)&#10;    androidTestImplementation(&quot;androidx.test:rules:1.6.1&quot;)&#10;    androidTestImplementation(&quot;androidx.navigation:navigation-testing:2.8.0&quot;)&#10;    androidTestImplementation(&quot;androidx.test.espresso:espresso-contrib:3.6.1&quot;)&#10;    androidTestImplementation(&quot;androidx.test:core:1.5.0&quot;)&#10;    debugImplementation(&quot;androidx.fragment:fragment-testing:1.8.4&quot;)&#10;}" />
              <option name="updatedContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;    id(&quot;androidx.navigation.safeargs.kotlin&quot;)&#10;    id(&quot;com.google.dagger.hilt.android&quot;)&#10;    id(&quot;org.jetbrains.kotlin.kapt&quot;)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.example.ecommerce&quot;&#10;    compileSdk = 36&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.example.ecommerce&quot;&#10;        minSdk = 34&#10;        targetSdk = 36&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;        testInstrumentationRunner = &quot;com.example.ecommerce.HiltTestRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;), &quot;proguard-rules.pro&quot;)&#10;        }&#10;    }&#10;&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;    }&#10;    buildFeatures {&#10;        viewBinding = true&#10;    }&#10;}&#10;&#10;dependencies {&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.appcompat)&#10;    implementation(libs.material)&#10;    implementation(libs.androidx.activity)&#10;    implementation(libs.androidx.constraintlayout)&#10;    implementation(libs.room.runtime)&#10;    implementation(libs.room.ktx)&#10;    kapt(libs.room.compiler)&#10;    implementation(libs.datastore.preferences)&#10;    implementation(libs.datastore.core)&#10;    implementation(libs.retrofit)&#10;    implementation(libs.retrofit.gson)&#10;    implementation(libs.okhttp)&#10;    implementation(libs.okhttp.logging)&#10;    implementation(libs.lifecycle.viewmodel)&#10;    implementation(libs.lifecycle.livedata)&#10;    implementation(libs.lifecycle.runtime)&#10;    implementation(libs.navigation.fragment)&#10;    implementation(libs.navigation.ui)&#10;    implementation(&quot;com.google.dagger:hilt-android:2.48&quot;)&#10;    kapt(&quot;com.google.dagger:hilt-compiler:2.48&quot;)&#10;    implementation(&quot;androidx.hilt:hilt-navigation-fragment:1.2.0&quot;)&#10;    implementation(&quot;io.coil-kt:coil:2.7.0&quot;)&#10;&#10;    kapt(&quot;androidx.hilt:hilt-compiler:1.2.0&quot;)&#10;&#10;    // Unit test dependencies&#10;    testImplementation(libs.junit)&#10;    testImplementation(&quot;org.mockito:mockito-core:5.14.0&quot;)&#10;    testImplementation(&quot;org.mockito.kotlin:mockito-kotlin:5.4.0&quot;)&#10;    testImplementation(&quot;org.jetbrains.kotlinx:kotlinx-coroutines-test:1.9.0&quot;)&#10;    testImplementation(&quot;androidx.test:core:1.6.1&quot;)&#10;    testImplementation(&quot;androidx.test.ext:junit:1.2.1&quot;)&#10;    testImplementation(&quot;com.squareup.okhttp3:mockwebserver:4.12.0&quot;)&#10;    testImplementation(&quot;androidx.room:room-testing:2.6.1&quot;)&#10;    testImplementation(&quot;com.google.code.gson:gson:2.11.0&quot;)&#10;    testImplementation(&quot;com.google.dagger:hilt-android-testing:2.48&quot;)&#10;    kaptTest(&quot;com.google.dagger:hilt-compiler:2.48&quot;)&#10;    testImplementation(&quot;org.jetbrains.kotlin:kotlin-test:1.9.24&quot;)&#10;&#10;    androidTestImplementation(&quot;com.google.dagger:hilt-android-testing:2.48&quot;)&#10;    kaptAndroidTest(&quot;com.google.dagger:hilt-compiler:2.48&quot;)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(&quot;androidx.test.espresso:espresso-core:3.6.1&quot;)&#10;    androidTestImplementation(&quot;androidx.test:runner:1.6.2&quot;)&#10;    androidTestImplementation(&quot;androidx.test:rules:1.6.1&quot;)&#10;    androidTestImplementation(&quot;androidx.navigation:navigation-testing:2.8.0&quot;)&#10;    androidTestImplementation(&quot;androidx.test.espresso:espresso-contrib:3.6.1&quot;)&#10;    androidTestImplementation(&quot;androidx.test:core:1.5.0&quot;)&#10;    debugImplementation(&quot;androidx.fragment:fragment-testing:1.8.4&quot;)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/androidTest/AndroidManifest.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/androidTest/AndroidManifest.xml" />
              <option name="originalContent" value="&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;application&gt;&#10;        &lt;activity&#10;            android:name=&quot;.HiltTestActivity&quot;&#10;            android:exported=&quot;false&quot;/&gt;&#10;    &lt;/application&gt;&#10;&lt;/manifest&gt;&#10;&#10;" />
              <option name="updatedContent" value="&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;application&gt;&#10;        &lt;activity&#10;            android:name=&quot;.HiltTestActivity&quot;&#10;            android:exported=&quot;false&quot;/&gt;&#10;    &lt;/application&gt;&#10;&lt;/manifest&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/androidTest/java/com/example/ecommerce/HiltTestActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/androidTest/java/com/example/ecommerce/HiltTestActivity.kt" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/androidTest/java/com/example/ecommerce/views/auth/HiltFragmentUtil.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/androidTest/java/com/example/ecommerce/views/auth/HiltFragmentUtil.kt" />
              <option name="updatedContent" value="package com.example.ecommerce.views.auth&#10;&#10;import android.os.Bundle&#10;import androidx.annotation.StyleRes&#10;import androidx.fragment.app.Fragment&#10;import androidx.fragment.app.testing.FragmentScenario&#10;import androidx.test.core.app.ApplicationProvider&#10;import dagger.hilt.android.testing.HiltAndroidRule&#10;import dagger.hilt.android.testing.HiltTestApplication&#10;&#10;inline fun &lt;reified T : Fragment&gt; launchFragmentInHiltContainer(&#10;    fragmentArgs: Bundle? = null,&#10;    @StyleRes themeResId: Int = R.style.Theme_Ecommerce,&#10;    crossinline action: T.() -&gt; Unit = {}&#10;): FragmentScenario&lt;T&gt; {&#10;    val scenario = FragmentScenario.launchInContainer(&#10;        T::class.java,&#10;        fragmentArgs,&#10;        themeResId,&#10;        object : FragmentFactory() {&#10;            override fun instantiate(classLoader: ClassLoader, className: String): Fragment {&#10;                val fragment = super.instantiate(classLoader, className)&#10;                (fragment as? T)?.apply(action)&#10;                return fragment&#10;            }&#10;        }&#10;    )&#10;    return scenario&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/androidTest/java/com/example/ecommerce/views/auth/home/MyProfileFragmentTest.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/androidTest/java/com/example/ecommerce/views/auth/home/MyProfileFragmentTest.kt" />
              <option name="originalContent" value="package com.example.ecommerce.views.home&#10;&#10;import androidx.fragment.app.FragmentFactory&#10;import androidx.navigation.Navigation&#10;import androidx.navigation.testing.TestNavHostController&#10;import androidx.test.core.app.ApplicationProvider&#10;import androidx.test.espresso.Espresso.onView&#10;import androidx.test.espresso.action.ViewActions&#10;import androidx.test.espresso.assertion.ViewAssertions&#10;import androidx.test.espresso.matcher.ViewMatchers&#10;import androidx.test.ext.junit.runners.AndroidJUnit4&#10;import androidx.test.platform.app.InstrumentationRegistry&#10;import com.example.ecommerce.R&#10;import com.example.ecommerce.launchFragmentInHiltContainer&#10;import dagger.hilt.android.testing.HiltAndroidRule&#10;import dagger.hilt.android.testing.HiltAndroidTest&#10;import kotlinx.coroutines.ExperimentalCoroutinesApi&#10;import org.junit.Before&#10;import org.junit.Rule&#10;import org.junit.Test&#10;import org.junit.runner.RunWith&#10;&#10;@HiltAndroidTest&#10;@RunWith(AndroidJUnit4::class)&#10;@ExperimentalCoroutinesApi&#10;class MyProfileFragmentTest {&#10;&#10;    @get:Rule&#10;    var hiltRule = HiltAndroidRule(this)&#10;&#10;    @Before&#10;    fun setup() {&#10;        hiltRule.inject()&#10;    }&#10;&#10;    @Test&#10;    fun testUiElementsAreDisplayed() {&#10;        launchFragmentInHiltContainer&lt;MyProfileFragment&gt;(&#10;            factory = FragmentFactory()&#10;        )&#10;&#10;       onView(ViewMatchers.withId(R.id.tvProfileGreeting))&#10;            .check(ViewAssertions.matches(ViewMatchers.isDisplayed()))&#10;&#10;        onView(ViewMatchers.withId(R.id.tvMyOrders))&#10;            .check(ViewAssertions.matches(ViewMatchers.isDisplayed()))&#10;&#10;        onView(ViewMatchers.withId(R.id.tvLogout))&#10;            .check(ViewAssertions.matches(ViewMatchers.isDisplayed()))&#10;    }&#10;&#10;    @Test&#10;    fun testLogoutClickNavigatesToLoginFragment() {&#10;        val navController = TestNavHostController(ApplicationProvider.getApplicationContext())&#10;&#10;        InstrumentationRegistry.getInstrumentation().runOnMainSync {&#10;            navController.setGraph(R.navigation.nav_graph)&#10;            navController.setCurrentDestination(R.id.myProfileFragment)&#10;        }&#10;&#10;        launchFragmentInHiltContainer&lt;MyProfileFragment&gt;(&#10;            factory = FragmentFactory()&#10;        ) {&#10;            Navigation.setViewNavController(this.requireView(), navController)&#10;        }&#10;&#10;        onView(ViewMatchers.withId(R.id.tvLogout)).perform(ViewActions.click())&#10;&#10;        assert(navController.currentDestination?.id == R.id.loginFragment)&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.ecommerce.views.home&#10;&#10;import androidx.fragment.app.FragmentFactory&#10;import androidx.navigation.Navigation&#10;import androidx.navigation.testing.TestNavHostController&#10;import androidx.test.core.app.ApplicationProvider&#10;import androidx.test.espresso.Espresso.onView&#10;import androidx.test.espresso.action.ViewActions&#10;import androidx.test.espresso.assertion.ViewAssertions&#10;import androidx.test.espresso.matcher.ViewMatchers&#10;import androidx.test.ext.junit.runners.AndroidJUnit4&#10;import androidx.test.filters.LargeTest&#10;import androidx.test.platform.app.InstrumentationRegistry&#10;import com.example.ecommerce.R&#10;import com.example.ecommerce.launchFragmentInHiltContainer&#10;import dagger.hilt.android.testing.HiltAndroidRule&#10;import dagger.hilt.android.testing.HiltAndroidTest&#10;import kotlinx.coroutines.ExperimentalCoroutinesApi&#10;import org.junit.Before&#10;import org.junit.Rule&#10;import org.junit.Test&#10;import org.junit.runner.RunWith&#10;&#10;@LargeTest&#10;@HiltAndroidTest&#10;@RunWith(AndroidJUnit4::class)&#10;@ExperimentalCoroutinesApi&#10;class MyProfileFragmentTest {&#10;&#10;    @get:Rule&#10;    var hiltRule = HiltAndroidRule(this)&#10;&#10;    @Before&#10;    fun setup() {&#10;        hiltRule.inject()&#10;    }&#10;&#10;    @Test&#10;    fun testUiElementsAreDisplayed() {&#10;        launchFragmentInHiltContainer&lt;MyProfileFragment&gt;(&#10;            factory = FragmentFactory()&#10;        )&#10;&#10;       onView(ViewMatchers.withId(R.id.tvProfileGreeting))&#10;            .check(ViewAssertions.matches(ViewMatchers.isDisplayed()))&#10;&#10;        onView(ViewMatchers.withId(R.id.tvMyOrders))&#10;            .check(ViewAssertions.matches(ViewMatchers.isDisplayed()))&#10;&#10;        onView(ViewMatchers.withId(R.id.tvLogout))&#10;            .check(ViewAssertions.matches(ViewMatchers.isDisplayed()))&#10;    }&#10;&#10;    @Test&#10;    fun testLogoutClickNavigatesToLoginFragment() {&#10;        val navController = TestNavHostController(ApplicationProvider.getApplicationContext())&#10;&#10;        InstrumentationRegistry.getInstrumentation().runOnMainSync {&#10;            navController.setGraph(R.navigation.nav_graph)&#10;            navController.setCurrentDestination(R.id.myProfileFragment)&#10;        }&#10;&#10;        launchFragmentInHiltContainer&lt;MyProfileFragment&gt;(&#10;            factory = FragmentFactory()&#10;        ) {&#10;            Navigation.setViewNavController(this.requireView(), navController)&#10;        }&#10;&#10;        onView(ViewMatchers.withId(R.id.tvLogout)).perform(ViewActions.click())&#10;&#10;        assert(navController.currentDestination?.id == R.id.loginFragment)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/ecommerce/views/home/TestFragment.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/ecommerce/views/home/TestFragment.kt" />
              <option name="originalContent" value="package com.example.ecommerce.views.home&#10;&#10;import android.os.Bundle&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import androidx.fragment.app.Fragment&#10;import com.example.ecommerce.databinding.FragmentMyFeedBinding&#10;import dagger.hilt.android.AndroidEntryPoint&#10;&#10;@AndroidEntryPoint&#10;class TestFragment: Fragment() {&#10;    &#10;    private val _binding: TestFragment?  = null&#10;    private val binding get() = _binding!!&#10;    &#10;    override fun onCreateView(&#10;        inflater: LayoutInflater,&#10;        container: ViewGroup?,&#10;        savedInstanceState: Bundle?&#10;    ): View {&#10;        _binding = TestFragment.&#10;        return binding.root&#10;    }&#10;&#10;}" />
              <option name="updatedContent" value="package com.example.ecommerce.views.home&#10;&#10;import android.os.Bundle&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import androidx.fragment.app.Fragment&#10;import com.example.ecommerce.databinding.FragmentTestBinding&#10;import dagger.hilt.android.AndroidEntryPoint&#10;&#10;@AndroidEntryPoint&#10;class TestFragment : Fragment() {&#10;&#10;    private var _binding: FragmentTestBinding? = null&#10;    private val binding get() = _binding!!&#10;&#10;    override fun onCreateView(&#10;        inflater: LayoutInflater,&#10;        container: ViewGroup?,&#10;        savedInstanceState: Bundle?&#10;    ): View {&#10;        _binding = FragmentTestBinding.inflate(inflater, container, false)&#10;        return binding.root&#10;    }&#10;&#10;    override fun onDestroyView() {&#10;        super.onDestroyView()&#10;        _binding = null&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>