<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/androidTest/java/com/example/ecommerce/HiltTestActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/androidTest/java/com/example/ecommerce/HiltTestActivity.kt" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/androidTest/java/com/example/ecommerce/data/repository/ProductRepositoryIntegrationTest.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/androidTest/java/com/example/ecommerce/data/repository/ProductRepositoryIntegrationTest.kt" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/androidTest/java/com/example/ecommerce/di/TestAppModule.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/androidTest/java/com/example/ecommerce/di/TestAppModule.kt" />
              <option name="originalContent" value="package com.example.ecommerce.di&#10;&#10;import android.content.Context&#10;import androidx.room.Room&#10;import com.example.ecommerce.data.db.LocalDB&#10;import com.example.ecommerce.data.db.dao.OrdersDao&#10;import com.example.ecommerce.data.db.dao.UserDao&#10;import com.example.ecommerce.data.repository.OrdersRepository&#10;import com.example.ecommerce.data.repository.ProductRepository&#10;import com.example.ecommerce.data.repository.UserRepository&#10;import com.example.ecommerce.fake.FakeOrdersRepository&#10;import com.example.ecommerce.fake.FakeProductRepository&#10;import com.example.ecommerce.fake.FakeUserRepository&#10;import dagger.Module&#10;import dagger.Provides&#10;import dagger.hilt.android.qualifiers.ApplicationContext&#10;import dagger.hilt.components.SingletonComponent&#10;import dagger.hilt.testing.TestInstallIn&#10;import javax.inject.Singleton&#10;&#10;@Module&#10;@TestInstallIn(&#10;    components = [SingletonComponent::class],&#10;    replaces = [AppModule::class]&#10;)&#10;object TestAppModule {&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideContext(@ApplicationContext context: Context): Context = context&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideDatabase(@ApplicationContext context: Context): LocalDB {&#10;        return Room.inMemoryDatabaseBuilder(context, LocalDB::class.java).build()&#10;    }&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideUserDao(database: LocalDB): UserDao = database.userDao()&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideOrdersDao(database: LocalDB): OrdersDao = database.ordersDao()&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideUserRepository(): UserRepository {&#10;        return FakeUserRepository()&#10;    }&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideOrdersRepository(ordersDao: OrdersDao): OrdersRepository {&#10;        return FakeOrdersRepository(ordersDao)&#10;    }&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideProductRepository(): ProductRepository {&#10;        return FakeProductRepository()&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.ecommerce.di&#10;&#10;import android.content.Context&#10;import androidx.room.Room&#10;import com.example.ecommerce.data.db.LocalDB&#10;import com.example.ecommerce.data.db.dao.OrdersDao&#10;import com.example.ecommerce.data.db.dao.UserDao&#10;import com.example.ecommerce.data.repository.OrdersRepository&#10;import com.example.ecommerce.data.repository.ProductRepository&#10;import com.example.ecommerce.data.repository.UserRepository&#10;import com.example.ecommerce.fake.FakeOrdersRepository&#10;import com.example.ecommerce.fake.FakeProductRepository&#10;import com.example.ecommerce.fake.FakeUserRepository&#10;import dagger.Module&#10;import dagger.Provides&#10;import dagger.hilt.android.qualifiers.ApplicationContext&#10;import dagger.hilt.components.SingletonComponent&#10;import dagger.hilt.testing.TestInstallIn&#10;import javax.inject.Singleton&#10;&#10;@Module&#10;@TestInstallIn(&#10;    components = [SingletonComponent::class],&#10;    replaces = [AppModule::class]&#10;)&#10;object TestAppModule {&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideContext(@ApplicationContext context: Context): Context = context&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideDatabase(@ApplicationContext context: Context): LocalDB {&#10;        return Room.inMemoryDatabaseBuilder(context, LocalDB::class.java).build()&#10;    }&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideUserDao(database: LocalDB): UserDao = database.userDao()&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideOrdersDao(database: LocalDB): OrdersDao = database.ordersDao()&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideUserRepository(): UserRepository {&#10;        return FakeUserRepository()&#10;    }&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideOrdersRepository(ordersDao: OrdersDao): OrdersRepository {&#10;        return FakeOrdersRepository(ordersDao)&#10;    }&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideProductRepository(): ProductRepository {&#10;        return FakeProductRepository()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/androidTest/java/com/example/ecommerce/di/TestProductApiModule.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/androidTest/java/com/example/ecommerce/di/TestProductApiModule.kt" />
              <option name="updatedContent" value="package com.example.ecommerce.di&#10;&#10;import com.example.ecommerce.data.api.ProductApiService&#10;import dagger.Module&#10;import dagger.Provides&#10;import dagger.hilt.components.SingletonComponent&#10;import dagger.hilt.testing.TestInstallIn&#10;import javax.inject.Singleton&#10;&#10;@Module&#10;@TestInstallIn(&#10;    components = [SingletonComponent::class],&#10;    replaces = [com.example.ecommerce.di.YourProductionApiModule::class] // Replace with your real module if needed&#10;)&#10;object TestProductApiModule {&#10;    @Provides&#10;    @Singleton&#10;    fun provideProductApiService(): ProductApiService {&#10;        // Return a fake or mock implementation for tests&#10;        return object : ProductApiService {&#10;            // ...implement required methods with fake data...&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/androidTest/java/com/example/ecommerce/di/TestProductRepositoryModule.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/androidTest/java/com/example/ecommerce/di/TestProductRepositoryModule.kt" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/androidTest/java/com/example/ecommerce/provider/SimpleContentProviderTest.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/androidTest/java/com/example/ecommerce/provider/SimpleContentProviderTest.kt" />
              <option name="updatedContent" value="package com.example.ecommerce.provider&#10;&#10;import android.content.ContentResolver&#10;import android.content.ContentValues&#10;import android.net.Uri&#10;import androidx.test.ext.junit.runners.AndroidJUnit4&#10;import androidx.test.platform.app.InstrumentationRegistry&#10;import org.junit.Assert.assertEquals&#10;import org.junit.Test&#10;import org.junit.runner.RunWith&#10;&#10;@RunWith(AndroidJUnit4::class)&#10;class SimpleContentProviderTest {&#10;&#10;    private val context = InstrumentationRegistry.getInstrumentation().targetContext&#10;    private val resolver: ContentResolver = context.contentResolver&#10;    private val TEST_URI = Uri.parse(&quot;content://com.example.ecommerce.provider/simple&quot;)&#10;&#10;    @Test&#10;    fun insertAndQuery_returnsInsertedValue() {&#10;        val values = ContentValues().apply {&#10;            put(&quot;name&quot;, &quot;testName&quot;)&#10;        }&#10;        val uri = resolver.insert(TEST_URI, values)&#10;        val cursor = resolver.query(TEST_URI, arrayOf(&quot;name&quot;), null, null, null)&#10;        cursor?.use {&#10;            assertEquals(true, it.moveToFirst())&#10;            val name = it.getString(it.getColumnIndexOrThrow(&quot;name&quot;))&#10;            assertEquals(&quot;testName&quot;, name)&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/androidTest/java/com/example/ecommerce/repo/ProductRepositoryIntegrationTest.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/androidTest/java/com/example/ecommerce/repo/ProductRepositoryIntegrationTest.kt" />
              <option name="originalContent" value="package com.example.ecommerce.data.repository&#10;&#10;import androidx.test.ext.junit.runners.AndroidJUnit4&#10;import com.example.ecommerce.data.model.Product&#10;import com.example.ecommerce.data.model.Rating&#10;import dagger.hilt.android.testing.HiltAndroidRule&#10;import dagger.hilt.android.testing.HiltAndroidTest&#10;import org.junit.After&#10;import org.junit.Before&#10;import org.junit.Rule&#10;import org.junit.Test&#10;import org.junit.runner.RunWith&#10;import javax.inject.Inject&#10;import org.junit.Assert.assertEquals&#10;import org.junit.Assert.assertNotNull&#10;import org.junit.Assert.assertNull&#10;import kotlinx.coroutines.runBlocking&#10;&#10;@HiltAndroidTest&#10;@RunWith(AndroidJUnit4::class)&#10;class ProductRepositoryIntegrationTest {&#10;&#10;    @get:Rule&#10;    var hiltRule = HiltAndroidRule(this)&#10;&#10;    @Inject&#10;    lateinit var productRepository: ProductRepository&#10;&#10;    private val localProducts = listOf(&#10;        Product(&#10;            id = 1,&#10;            title = &quot;Test Product 1&quot;,&#10;            price = 19.99,&#10;            description = &quot;Description 1&quot;,&#10;            category = &quot;electronics&quot;,&#10;            image = &quot;https://example.com/image1.jpg&quot;,&#10;            rating = Rating(rate = 4.5, count = 100)&#10;        ),&#10;        Product(&#10;            id = 2,&#10;            title = &quot;Test Product 2&quot;,&#10;            price = 29.99,&#10;            description = &quot;Description 2&quot;,&#10;            category = &quot;clothing&quot;,&#10;            image = &quot;https://example.com/image2.jpg&quot;,&#10;            rating = Rating(rate = 4.0, count = 50)&#10;        )&#10;    )&#10;&#10;    @Before&#10;    fun setUp() {&#10;        hiltRule.inject()&#10;    }&#10;&#10;    @After&#10;    fun tearDown() {&#10;    }&#10;&#10;    @Test&#10;    fun `getAllProducts returns list of products`() = runBlocking {&#10;        val products = productRepository.getAllProducts()&#10;        assertNotNull(products)&#10;        assertEquals(localProducts.size, products?.size)&#10;        assertEquals(localProducts[0], products?.get(0))&#10;        assertEquals(localProducts[1], products?.get(1))&#10;    }&#10;&#10;    @Test&#10;    fun `getAllProducts returns null on API failure`() = runBlocking {&#10;        val products = productRepository.getAllProducts()&#10;        assertNull(products)&#10;    }&#10;&#10;    @Test&#10;    fun `getProductById returns product`() = runBlocking {&#10;        val product = productRepository.getProductById(1)&#10;        assertNotNull(product)&#10;        assertEquals(localProducts[0], product)&#10;    }&#10;&#10;    @Test&#10;    fun `getProductById returns null on API failure`() = runBlocking {&#10;        val product = productRepository.getProductById(999)&#10;        assertNull(product)&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.ecommerce.data.repository&#10;&#10;import androidx.test.ext.junit.runners.AndroidJUnit4&#10;import com.example.ecommerce.data.model.Product&#10;import com.example.ecommerce.data.model.Rating&#10;import dagger.hilt.android.testing.HiltAndroidRule&#10;import dagger.hilt.android.testing.HiltAndroidTest&#10;import org.junit.After&#10;import org.junit.Before&#10;import org.junit.Rule&#10;import org.junit.Test&#10;import org.junit.runner.RunWith&#10;import javax.inject.Inject&#10;import org.junit.Assert.assertEquals&#10;import org.junit.Assert.assertNotNull&#10;import org.junit.Assert.assertNull&#10;import kotlinx.coroutines.runBlocking&#10;&#10;@HiltAndroidTest&#10;@RunWith(AndroidJUnit4::class)&#10;class ProductRepositoryIntegrationTest {&#10;&#10;    @get:Rule&#10;    var hiltRule = HiltAndroidRule(this)&#10;&#10;    @Inject&#10;    lateinit var productRepository: ProductRepository&#10;&#10;    private val localProducts = listOf(&#10;        Product(&#10;            id = 1,&#10;            title = &quot;Test Product 1&quot;,&#10;            price = 19.99,&#10;            description = &quot;Description 1&quot;,&#10;            category = &quot;electronics&quot;,&#10;            image = &quot;https://example.com/image1.jpg&quot;,&#10;            rating = Rating(rate = 4.5, count = 100)&#10;        ),&#10;        Product(&#10;            id = 2,&#10;            title = &quot;Test Product 2&quot;,&#10;            price = 29.99,&#10;            description = &quot;Description 2&quot;,&#10;            category = &quot;clothing&quot;,&#10;            image = &quot;https://example.com/image2.jpg&quot;,&#10;            rating = Rating(rate = 4.0, count = 50)&#10;        )&#10;    )&#10;&#10;    @Before&#10;    fun setUp() {&#10;        hiltRule.inject()&#10;    }&#10;&#10;    @After&#10;    fun tearDown() {&#10;    }&#10;&#10;    @Test&#10;    fun `getAllProducts returns list of products`() = runBlocking {&#10;        val products = productRepository.getAllProducts()&#10;        assertNotNull(products)&#10;        assertEquals(localProducts.size, products?.size)&#10;        assertEquals(localProducts[0], products?.get(0))&#10;        assertEquals(localProducts[1], products?.get(1))&#10;    }&#10;&#10;    @Test&#10;    fun `getAllProducts returns null on API failure`() = runBlocking {&#10;        val products = productRepository.getAllProducts()&#10;        assertNull(products)&#10;    }&#10;&#10;    @Test&#10;    fun `getProductById returns product`() = runBlocking {&#10;        val product = productRepository.getProductById(1)&#10;        assertNotNull(product)&#10;        assertEquals(localProducts[0], product)&#10;    }&#10;&#10;    @Test&#10;    fun `getProductById returns null on API failure`() = runBlocking {&#10;        val product = productRepository.getProductById(999)&#10;        assertNull(product)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/androidTest/java/com/example/ecommerce/views/auth/HiltFragmentUtil.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/androidTest/java/com/example/ecommerce/views/auth/HiltFragmentUtil.kt" />
              <option name="updatedContent" value="package com.example.ecommerce.views.auth&#10;&#10;import android.os.Bundle&#10;import androidx.annotation.StyleRes&#10;import androidx.fragment.app.Fragment&#10;import androidx.fragment.app.testing.FragmentScenario&#10;import androidx.test.core.app.ApplicationProvider&#10;import dagger.hilt.android.testing.HiltAndroidRule&#10;import dagger.hilt.android.testing.HiltTestApplication&#10;&#10;inline fun &lt;reified T : Fragment&gt; launchFragmentInHiltContainer(&#10;    fragmentArgs: Bundle? = null,&#10;    @StyleRes themeResId: Int = R.style.Theme_Ecommerce,&#10;    crossinline action: T.() -&gt; Unit = {}&#10;): FragmentScenario&lt;T&gt; {&#10;    val scenario = FragmentScenario.launchInContainer(&#10;        T::class.java,&#10;        fragmentArgs,&#10;        themeResId,&#10;        object : FragmentFactory() {&#10;            override fun instantiate(classLoader: ClassLoader, className: String): Fragment {&#10;                val fragment = super.instantiate(classLoader, className)&#10;                (fragment as? T)?.apply(action)&#10;                return fragment&#10;            }&#10;        }&#10;    )&#10;    return scenario&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/ecommerce/data/repository/UserRepositoryImpl.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/ecommerce/data/repository/UserRepositoryImpl.kt" />
              <option name="originalContent" value="package com.example.ecommerce.data.repository&#10;&#10;import com.example.ecommerce.data.db.entity.User&#10;&#10;class UserRepositoryImpl(private val userDao: com.example.ecommerce.data.db.dao.UserDao) : UserRepository {&#10;    override suspend fun registerUser(userName: String, password: String): Long? {&#10;        val existingUser = userDao.getUserByUserName(userName)&#10;        if (existingUser != null) {&#10;            return null&#10;        }&#10;        val newUser = User(userName = userName, password = password)&#10;        return userDao.insertUser(newUser)&#10;    }&#10;&#10;    override suspend fun loginUser(userName: String): User? {&#10;        return userDao.getUserByUserName(userName)&#10;    }&#10;&#10;    override suspend fun getUserById(userId: Long): User? {&#10;        return userDao.getUserById(userId)&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.ecommerce.data.repository&#10;&#10;import com.example.ecommerce.data.db.dao.UserDao&#10;import com.example.ecommerce.data.db.entity.User&#10;import javax.inject.Inject&#10;&#10;class UserRepositoryImpl @Inject constructor(&#10;    private val userDao: UserDao&#10;) : UserRepository {&#10;    override suspend fun registerUser(userName: String, password: String): Long? {&#10;        val existingUser = userDao.getUserByUserName(userName)&#10;        if (existingUser != null) {&#10;            return null&#10;        }&#10;        val newUser = User(userName = userName, password = password)&#10;        return userDao.insertUser(newUser)&#10;    }&#10;&#10;    override suspend fun loginUser(userName: String): User? {&#10;        return userDao.getUserByUserName(userName)&#10;    }&#10;&#10;    override suspend fun getUserById(userId: Long): User? {&#10;        return userDao.getUserById(userId)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/ecommerce/views/home/TestFragment.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/ecommerce/views/home/TestFragment.kt" />
              <option name="originalContent" value="package com.example.ecommerce.views.home&#10;&#10;import android.os.Bundle&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import androidx.fragment.app.Fragment&#10;import com.example.ecommerce.databinding.FragmentMyFeedBinding&#10;import dagger.hilt.android.AndroidEntryPoint&#10;&#10;@AndroidEntryPoint&#10;class TestFragment: Fragment() {&#10;    &#10;    private val _binding: TestFragment?  = null&#10;    private val binding get() = _binding!!&#10;    &#10;    override fun onCreateView(&#10;        inflater: LayoutInflater,&#10;        container: ViewGroup?,&#10;        savedInstanceState: Bundle?&#10;    ): View {&#10;        _binding = TestFragment.&#10;        return binding.root&#10;    }&#10;&#10;}" />
              <option name="updatedContent" value="package com.example.ecommerce.views.home&#10;&#10;import android.os.Bundle&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import androidx.fragment.app.Fragment&#10;import com.example.ecommerce.databinding.FragmentTestBinding&#10;import dagger.hilt.android.AndroidEntryPoint&#10;&#10;@AndroidEntryPoint&#10;class TestFragment : Fragment() {&#10;&#10;    private var _binding: FragmentTestBinding? = null&#10;    private val binding get() = _binding!!&#10;&#10;    override fun onCreateView(&#10;        inflater: LayoutInflater,&#10;        container: ViewGroup?,&#10;        savedInstanceState: Bundle?&#10;    ): View {&#10;        _binding = FragmentTestBinding.inflate(inflater, container, false)&#10;        return binding.root&#10;    }&#10;&#10;    override fun onDestroyView() {&#10;        super.onDestroyView()&#10;        _binding = null&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/test/java/com/example/ecommerce/di/TestAppModule.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/test/java/com/example/ecommerce/di/TestAppModule.kt" />
              <option name="originalContent" value="package com.example.ecommerce.di&#10;&#10;import android.content.Context&#10;import androidx.datastore.core.DataStore&#10;import androidx.datastore.preferences.core.Preferences&#10;import androidx.datastore.preferences.core.PreferenceDataStoreFactory&#10;import androidx.datastore.preferences.preferencesDataStoreFile&#10;import androidx.room.Room&#10;import com.example.ecommerce.data.api.ProductApiService&#10;import com.example.ecommerce.data.db.LocalDB&#10;import com.example.ecommerce.data.db.dao.OrdersDao&#10;import com.example.ecommerce.data.db.dao.UserDao&#10;import com.example.ecommerce.data.preferences.UserPreferencesRepository&#10;import com.example.ecommerce.data.repository.OrdersRepository&#10;import com.example.ecommerce.data.repository.ProductRepository&#10;import dagger.Module&#10;import dagger.Provides&#10;import dagger.hilt.android.qualifiers.ApplicationContext&#10;import dagger.hilt.components.SingletonComponent&#10;import dagger.hilt.testing.TestInstallIn&#10;import javax.inject.Singleton&#10;&#10;@Module&#10;@TestInstallIn(&#10;    components = [SingletonComponent::class],&#10;    replaces = [DatabaseModule::class, RepositoryModule::class, PreferencesModule::class, NetworkModule::class]&#10;)&#10;object TestAppModule {&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideDatabase(@ApplicationContext context: Context): LocalDB {&#10;        return Room.inMemoryDatabaseBuilder(context, LocalDB::class.java)&#10;            .allowMainThreadQueries()&#10;            .build()&#10;    }&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideUserDao(database: LocalDB): UserDao = database.userDao()&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideOrdersDao(database: LocalDB): OrdersDao = database.ordersDao()&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideDataStore(@ApplicationContext context: Context): DataStore&lt;Preferences&gt; {&#10;        return PreferenceDataStoreFactory.create {&#10;            context.preferencesDataStoreFile(&quot;test_user_prefs&quot;)&#10;        }&#10;    }&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideUserPreferencesRepository(@ApplicationContext context: Context): UserPreferencesRepository {&#10;        return UserPreferencesRepository(context)&#10;    }&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideOrdersRepository(ordersDao: OrdersDao): OrdersRepository {&#10;        return OrdersRepository(ordersDao)&#10;    }&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideProductRepository(productApiService: ProductApiService): ProductRepository {&#10;        return ProductRepository(productApiService)&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.ecommerce.di&#10;&#10;import android.content.Context&#10;import androidx.datastore.core.DataStore&#10;import androidx.datastore.preferences.core.Preferences&#10;import androidx.datastore.preferences.core.PreferenceDataStoreFactory&#10;import androidx.datastore.preferences.preferencesDataStoreFile&#10;import androidx.room.Room&#10;import com.example.ecommerce.data.api.ProductApiService&#10;import com.example.ecommerce.data.db.LocalDB&#10;import com.example.ecommerce.data.db.dao.OrdersDao&#10;import com.example.ecommerce.data.db.dao.UserDao&#10;import com.example.ecommerce.data.preferences.UserPreferencesRepository&#10;import com.example.ecommerce.data.repository.OrdersRepository&#10;import com.example.ecommerce.data.repository.ProductRepository&#10;import dagger.Module&#10;import dagger.Provides&#10;import dagger.hilt.android.qualifiers.ApplicationContext&#10;import dagger.hilt.components.SingletonComponent&#10;import dagger.hilt.testing.TestInstallIn&#10;import javax.inject.Singleton&#10;&#10;@Module&#10;@TestInstallIn(&#10;    components = [SingletonComponent::class],&#10;    replaces = [DatabaseModule::class, RepositoryModule::class, PreferencesModule::class, NetworkModule::class]&#10;)&#10;object TestAppModule {&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideDatabase(@ApplicationContext context: Context): LocalDB {&#10;        return Room.inMemoryDatabaseBuilder(context, LocalDB::class.java)&#10;            .allowMainThreadQueries()&#10;            .build()&#10;    }&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideUserDao(database: LocalDB): UserDao = database.userDao()&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideOrdersDao(database: LocalDB): OrdersDao = database.ordersDao()&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideDataStore(@ApplicationContext context: Context): DataStore&lt;Preferences&gt; {&#10;        return PreferenceDataStoreFactory.create {&#10;            context.preferencesDataStoreFile(&quot;test_user_prefs&quot;)&#10;        }&#10;    }&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideUserPreferencesRepository(@ApplicationContext context: Context): UserPreferencesRepository {&#10;        return UserPreferencesRepository(context)&#10;    }&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideOrdersRepository(ordersDao: OrdersDao): OrdersRepository {&#10;        return OrdersRepository(ordersDao)&#10;    }&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideProductRepository(productApiService: ProductApiService): ProductRepository {&#10;        return ProductRepository(productApiService)&#10;    }&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideUserRepository(userDao: UserDao): com.example.ecommerce.data.repository.UserRepository {&#10;        return com.example.ecommerce.data.repository.UserRepository(userDao)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/test/java/com/example/ecommerce/repo/OrdersRepositoryIntegrationTest.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/test/java/com/example/ecommerce/repo/OrdersRepositoryIntegrationTest.kt" />
              <option name="originalContent" value="package com.example.ecommerce.data.repository&#10;&#10;import org.junit.runner.RunWith&#10;import org.junit.runners.JUnit4&#10;import com.example.ecommerce.data.db.dao.OrdersDao&#10;import com.example.ecommerce.data.db.entity.Order&#10;import dagger.hilt.android.testing.HiltAndroidRule&#10;import dagger.hilt.android.testing.HiltAndroidTest&#10;import kotlinx.coroutines.flow.first&#10;import kotlinx.coroutines.test.runTest&#10;import org.junit.Before&#10;import org.junit.Rule&#10;import org.junit.Test&#10;import org.junit.runner.RunWith&#10;import javax.inject.Inject&#10;import kotlin.test.assertEquals&#10;import kotlin.test.assertNotNull&#10;&#10;@HiltAndroidTest&#10;@RunWith(JUnit4::class)&#10;class OrdersRepositoryTest {&#10;&#10;    @get:Rule&#10;    var hiltRule = HiltAndroidRule(this)&#10;&#10;    @Inject&#10;    lateinit var ordersDao: OrdersDao&#10;&#10;    @Inject&#10;    lateinit var repository: OrdersRepository&#10;&#10;    @Before&#10;    fun setUp() {&#10;        hiltRule.inject()&#10;    }&#10;&#10;    @Test&#10;    fun placeOrder_insertsOrderAndReturnsOrderId() = runTest {&#10;        val order = Order(userId = 1L, productIds = listOf(1, 2))&#10;&#10;        val orderId = repository.placeOrder(order)&#10;&#10;        assertNotNull(orderId)&#10;        val orders = ordersDao.getOrdersByUser(1L).first()&#10;        assertEquals(listOf(order.copy(id = orderId)), orders)&#10;    }&#10;&#10;    @Test&#10;    fun getOrdersByUser_returnsOrdersForGivenUserId() = runTest {&#10;        val order1 = Order(userId = 1L, productIds = listOf(1, 2))&#10;        val order2 = Order(userId = 1L, productIds = listOf(3))&#10;        val order3 = Order(userId = 2L, productIds = listOf(4))&#10;        ordersDao.insertOrder(order1)&#10;        ordersDao.insertOrder(order2)&#10;        ordersDao.insertOrder(order3)&#10;&#10;        val orders = repository.getOrdersByUser(1L).first()&#10;        assertEquals(2, orders.size)&#10;        assertEquals(listOf(1L, 1L), orders.map { it.userId })&#10;    }&#10;&#10;    @Test&#10;    fun getOrdersByUser_returnsEmptyListForNonExistentUserId() = runTest {&#10;        val orders = repository.getOrdersByUser(999L).first()&#10;        assertEquals(emptyList(), orders)&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.ecommerce.data.repository&#10;&#10;import org.junit.runner.RunWith&#10;import org.junit.runners.JUnit4&#10;import com.example.ecommerce.data.db.dao.OrdersDao&#10;import com.example.ecommerce.data.db.entity.Order&#10;import dagger.hilt.android.testing.HiltAndroidRule&#10;import dagger.hilt.android.testing.HiltAndroidTest&#10;import kotlinx.coroutines.flow.first&#10;import kotlinx.coroutines.test.runTest&#10;import org.junit.Before&#10;import org.junit.Rule&#10;import org.junit.Test&#10;import javax.inject.Inject&#10;import kotlin.test.assertEquals&#10;import kotlin.test.assertNotNull&#10;&#10;@HiltAndroidTest&#10;@RunWith(JUnit4::class)&#10;class OrdersRepositoryTest {&#10;&#10;    @get:Rule&#10;    var hiltRule = HiltAndroidRule(this)&#10;&#10;    @Inject&#10;    lateinit var ordersDao: OrdersDao&#10;&#10;    @Inject&#10;    lateinit var repository: OrdersRepository&#10;&#10;    @Before&#10;    fun setUp() {&#10;        hiltRule.inject()&#10;    }&#10;&#10;    @Test&#10;    fun placeOrder_insertsOrderAndReturnsOrderId() = runTest {&#10;        val order = Order(userId = 1L, productIds = listOf(1, 2))&#10;&#10;        val orderId = repository.placeOrder(order)&#10;&#10;        assertNotNull(orderId)&#10;        val orders = ordersDao.getOrdersByUser(1L).first()&#10;        assertEquals(listOf(order.copy(id = orderId)), orders)&#10;    }&#10;&#10;    @Test&#10;    fun getOrdersByUser_returnsOrdersForGivenUserId() = runTest {&#10;        val order1 = Order(userId = 1L, productIds = listOf(1, 2))&#10;        val order2 = Order(userId = 1L, productIds = listOf(3))&#10;        val order3 = Order(userId = 2L, productIds = listOf(4))&#10;        ordersDao.insertOrder(order1)&#10;        ordersDao.insertOrder(order2)&#10;        ordersDao.insertOrder(order3)&#10;&#10;        val orders = repository.getOrdersByUser(1L).first()&#10;        assertEquals(2, orders.size)&#10;        assertEquals(listOf(1L, 1L), orders.map { it.userId })&#10;    }&#10;&#10;    @Test&#10;    fun getOrdersByUser_returnsEmptyListForNonExistentUserId() = runTest {&#10;        val orders = repository.getOrdersByUser(999L).first()&#10;        assertEquals(emptyList(), orders)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/test/java/com/example/ecommerce/repo/ProductRepositoryIntegrationTest.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/test/java/com/example/ecommerce/repo/ProductRepositoryIntegrationTest.kt" />
              <option name="originalContent" value="package com.example.ecommerce.data.repository&#10;&#10;import androidx.test.ext.junit.runners.AndroidJUnit4&#10;import com.example.ecommerce.data.model.Product&#10;import com.example.ecommerce.data.model.Rating&#10;import dagger.hilt.android.testing.HiltAndroidRule&#10;import dagger.hilt.android.testing.HiltAndroidTest&#10;import kotlinx.coroutines.runBlocking&#10;import okhttp3.mockwebserver.MockResponse&#10;import okhttp3.mockwebserver.MockWebServer&#10;import org.junit.After&#10;import org.junit.Before&#10;import org.junit.Rule&#10;import org.junit.Test&#10;import org.junit.runner.RunWith&#10;import javax.inject.Inject&#10;import kotlin.test.assertEquals&#10;import kotlin.test.assertNotNull&#10;import kotlin.test.assertNull&#10;&#10;@HiltAndroidTest&#10;@RunWith(AndroidJUnit4::class)&#10;class ProductRepositoryTest {&#10;&#10;    @get:Rule&#10;    var hiltRule = HiltAndroidRule(this)&#10;&#10;    @Inject&#10;    lateinit var productRepository: ProductRepository&#10;&#10;    @Inject&#10;    lateinit var mockWebServer: MockWebServer&#10;&#10;    @Before&#10;    fun setup() {&#10;        mockWebServer.start()&#10;        hiltRule.inject()&#10;    }&#10;&#10;    @After&#10;    fun tearDown() {&#10;        mockWebServer.shutdown()&#10;    }&#10;&#10;    @Test&#10;    fun testGetAllProducts_success() = runBlocking {&#10;        val mockResponse = &quot;&quot;&quot;&#10;            [&#10;                {&quot;id&quot;: 1, &quot;title&quot;: &quot;Product 1&quot;, &quot;price&quot;: 10.0, &quot;description&quot;: &quot;Desc 1&quot;, &quot;category&quot;: &quot;Cat 1&quot;, &quot;image&quot;: &quot;img1.jpg&quot;, &quot;rating&quot;: {&quot;rate&quot;: 4.5, &quot;count&quot;: 100}},&#10;                {&quot;id&quot;: 2, &quot;title&quot;: &quot;Product 2&quot;, &quot;price&quot;: 20.0, &quot;description&quot;: &quot;Desc 2&quot;, &quot;category&quot;: &quot;Cat 2&quot;, &quot;image&quot;: &quot;img2.jpg&quot;, &quot;rating&quot;: {&quot;rate&quot;: 4.0, &quot;count&quot;: 50}}&#10;            ]&#10;        &quot;&quot;&quot;.trimIndent()&#10;        mockWebServer.enqueue(MockResponse().setBody(mockResponse).setResponseCode(200))&#10;&#10;        val products = productRepository.getAllProducts()&#10;        assertNotNull(products)&#10;        assertEquals(2, products.size)&#10;        assertEquals(&quot;Product 1&quot;, products[0].title)&#10;        assertEquals(4.5, products[0].rating.rate)&#10;        assertEquals(&quot;Product 2&quot;, products[1].title)&#10;    }&#10;&#10;    @Test&#10;    fun testGetAllProducts_failure() = runBlocking {&#10;        mockWebServer.enqueue(MockResponse().setResponseCode(500))&#10;&#10;        val products = productRepository.getAllProducts()&#10;        assertNull(products)&#10;    }&#10;&#10;    @Test&#10;    fun testGetProductById_success() = runBlocking {&#10;        val mockResponse = &quot;&quot;&quot;&#10;            {&quot;id&quot;: 1, &quot;title&quot;: &quot;Product 1&quot;, &quot;price&quot;: 10.0, &quot;description&quot;: &quot;Desc 1&quot;, &quot;category&quot;: &quot;Cat 1&quot;, &quot;image&quot;: &quot;img1.jpg&quot;, &quot;rating&quot;: {&quot;rate&quot;: 4.5, &quot;count&quot;: 100}}&#10;        &quot;&quot;&quot;.trimIndent()&#10;        mockWebServer.enqueue(MockResponse().setBody(mockResponse).setResponseCode(200))&#10;&#10;        val product = productRepository.getProductById(1)&#10;        assertNotNull(product)&#10;        assertEquals(&quot;Product 1&quot;, product.title)&#10;        assertEquals(10.0, product.price)&#10;        assertEquals(4.5, product.rating.rate)&#10;    }&#10;&#10;    @Test&#10;    fun testGetProductById_failure() = runBlocking {&#10;        mockWebServer.enqueue(MockResponse().setResponseCode(404))&#10;&#10;        val product = productRepository.getProductById(999)&#10;        assertNull(product)&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.ecommerce.data.repository&#10;&#10;import com.example.ecommerce.data.model.Product&#10;import com.example.ecommerce.data.model.Rating&#10;import dagger.hilt.android.testing.HiltAndroidRule&#10;import dagger.hilt.android.testing.HiltAndroidTest&#10;import kotlinx.coroutines.runBlocking&#10;import okhttp3.mockwebserver.MockResponse&#10;import okhttp3.mockwebserver.MockWebServer&#10;import org.junit.After&#10;import org.junit.Before&#10;import org.junit.Rule&#10;import org.junit.Test&#10;import org.junit.runner.RunWith&#10;import org.junit.runners.JUnit4&#10;import javax.inject.Inject&#10;import kotlin.test.assertEquals&#10;import kotlin.test.assertNotNull&#10;import kotlin.test.assertNull&#10;&#10;@HiltAndroidTest&#10;@RunWith(JUnit4::class)&#10;class ProductRepositoryTest {&#10;&#10;    @get:Rule&#10;    var hiltRule = HiltAndroidRule(this)&#10;&#10;    @Inject&#10;    lateinit var productRepository: ProductRepository&#10;&#10;    @Inject&#10;    lateinit var mockWebServer: MockWebServer&#10;&#10;    @Before&#10;    fun setup() {&#10;        mockWebServer.start()&#10;        hiltRule.inject()&#10;    }&#10;&#10;    @After&#10;    fun tearDown() {&#10;        mockWebServer.shutdown()&#10;    }&#10;&#10;    @Test&#10;    fun testGetAllProducts_success() = runBlocking {&#10;        val mockResponse = &quot;&quot;&quot;&#10;            [&#10;                {&quot;id&quot;: 1, &quot;title&quot;: &quot;Product 1&quot;, &quot;price&quot;: 10.0, &quot;description&quot;: &quot;Desc 1&quot;, &quot;category&quot;: &quot;Cat 1&quot;, &quot;image&quot;: &quot;img1.jpg&quot;, &quot;rating&quot;: {&quot;rate&quot;: 4.5, &quot;count&quot;: 100}},&#10;                {&quot;id&quot;: 2, &quot;title&quot;: &quot;Product 2&quot;, &quot;price&quot;: 20.0, &quot;description&quot;: &quot;Desc 2&quot;, &quot;category&quot;: &quot;Cat 2&quot;, &quot;image&quot;: &quot;img2.jpg&quot;, &quot;rating&quot;: {&quot;rate&quot;: 4.0, &quot;count&quot;: 50}}&#10;            ]&#10;        &quot;&quot;&quot;.trimIndent()&#10;        mockWebServer.enqueue(MockResponse().setBody(mockResponse).setResponseCode(200))&#10;&#10;        val products = productRepository.getAllProducts()&#10;        assertNotNull(products)&#10;        assertEquals(2, products.size)&#10;        assertEquals(&quot;Product 1&quot;, products[0].title)&#10;        assertEquals(4.5, products[0].rating.rate)&#10;        assertEquals(&quot;Product 2&quot;, products[1].title)&#10;    }&#10;&#10;    @Test&#10;    fun testGetAllProducts_failure() = runBlocking {&#10;        mockWebServer.enqueue(MockResponse().setResponseCode(500))&#10;&#10;        val products = productRepository.getAllProducts()&#10;        assertNull(products)&#10;    }&#10;&#10;    @Test&#10;    fun testGetProductById_success() = runBlocking {&#10;        val mockResponse = &quot;&quot;&quot;&#10;            {&quot;id&quot;: 1, &quot;title&quot;: &quot;Product 1&quot;, &quot;price&quot;: 10.0, &quot;description&quot;: &quot;Desc 1&quot;, &quot;category&quot;: &quot;Cat 1&quot;, &quot;image&quot;: &quot;img1.jpg&quot;, &quot;rating&quot;: {&quot;rate&quot;: 4.5, &quot;count&quot;: 100}}&#10;        &quot;&quot;&quot;.trimIndent()&#10;        mockWebServer.enqueue(MockResponse().setBody(mockResponse).setResponseCode(200))&#10;&#10;        val product = productRepository.getProductById(1)&#10;        assertNotNull(product)&#10;        assertEquals(&quot;Product 1&quot;, product.title)&#10;        assertEquals(10.0, product.price)&#10;        assertEquals(4.5, product.rating.rate)&#10;    }&#10;&#10;    @Test&#10;    fun testGetProductById_failure() = runBlocking {&#10;        mockWebServer.enqueue(MockResponse().setResponseCode(404))&#10;&#10;        val product = productRepository.getProductById(999)&#10;        assertNull(product)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/test/java/com/example/ecommerce/repo/UserRepositoryIntegrationTest.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/test/java/com/example/ecommerce/repo/UserRepositoryIntegrationTest.kt" />
              <option name="originalContent" value="package com.example.ecommerce.repo&#10;&#10;import androidx.test.ext.junit.runners.AndroidJUnit4&#10;import com.example.ecommerce.data.db.LocalDB&#10;import com.example.ecommerce.data.db.entity.User&#10;import com.example.ecommerce.data.repository.UserRepository&#10;import dagger.hilt.android.testing.HiltAndroidRule&#10;import dagger.hilt.android.testing.HiltAndroidTest&#10;import kotlinx.coroutines.runBlocking&#10;import org.junit.After&#10;import org.junit.Before&#10;import org.junit.Rule&#10;import org.junit.Test&#10;import org.junit.runner.RunWith&#10;import javax.inject.Inject&#10;import kotlin.test.assertEquals&#10;import kotlin.test.assertNotNull&#10;import kotlin.test.assertNull&#10;&#10;@HiltAndroidTest&#10;@RunWith(AndroidJUnit4::class)&#10;class UserRepositoryIntegrationTest {&#10;&#10;    @get:Rule&#10;    var hiltRule = HiltAndroidRule(this)&#10;&#10;    @Inject&#10;    lateinit var userRepository: UserRepository&#10;&#10;    @Inject&#10;    lateinit var database: LocalDB&#10;&#10;    @Before&#10;    fun setup() {&#10;        hiltRule.inject()&#10;    }&#10;&#10;    @After&#10;    fun tearDown() {&#10;        database.close()&#10;    }&#10;&#10;    @Test&#10;    fun testRegisterUser_success() = runBlocking {&#10;        val userId = userRepository.registerUser(&quot;testuser&quot;, &quot;password&quot;)&#10;        assertNotNull(userId)&#10;&#10;        val user = userRepository.getUserById(userId!!)&#10;        assertNotNull(user)&#10;        assertEquals(&quot;testuser&quot;, user.userName)&#10;        assertEquals(&quot;password&quot;, user.password)&#10;    }&#10;&#10;    @Test&#10;    fun testRegisterUser_duplicateUserName() = runBlocking {&#10;        userRepository.registerUser(&quot;testuser&quot;, &quot;password&quot;)&#10;        val userId = userRepository.registerUser(&quot;testuser&quot;, &quot;newpassword&quot;)&#10;        assertNull(userId)&#10;    }&#10;&#10;    @Test&#10;    fun testLoginUser_success() = runBlocking {&#10;        userRepository.registerUser(&quot;testuser&quot;, &quot;password&quot;)&#10;        val user = userRepository.loginUser(&quot;testuser&quot;)&#10;        assertNotNull(user)&#10;        assertEquals(&quot;testuser&quot;, user.userName)&#10;    }&#10;&#10;    @Test&#10;    fun testLoginUser_invalidUserName() = runBlocking {&#10;        val user = userRepository.loginUser(&quot;nonexistent&quot;)&#10;        assertNull(user)&#10;    }&#10;&#10;    @Test&#10;    fun testGetUserById_success() = runBlocking {&#10;        val userId = userRepository.registerUser(&quot;testuser&quot;, &quot;password&quot;)&#10;        val user = userRepository.getUserById(userId!!)&#10;        assertNotNull(user)&#10;        assertEquals(&quot;testuser&quot;, user.userName)&#10;    }&#10;&#10;    @Test&#10;    fun testGetUserById_invalidId() = runBlocking {&#10;        val user = userRepository.getUserById(999L)&#10;        assertNull(user)&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.ecommerce.repo&#10;&#10;import org.junit.runner.RunWith&#10;import org.junit.runners.JUnit4&#10;import com.example.ecommerce.data.db.LocalDB&#10;import com.example.ecommerce.data.db.entity.User&#10;import com.example.ecommerce.data.repository.UserRepository&#10;import dagger.hilt.android.testing.HiltAndroidRule&#10;import dagger.hilt.android.testing.HiltAndroidTest&#10;import kotlinx.coroutines.runBlocking&#10;import org.junit.After&#10;import org.junit.Before&#10;import org.junit.Rule&#10;import org.junit.Test&#10;import javax.inject.Inject&#10;import kotlin.test.assertEquals&#10;import kotlin.test.assertNotNull&#10;import kotlin.test.assertNull&#10;&#10;@HiltAndroidTest&#10;@RunWith(JUnit4::class)&#10;class UserRepositoryIntegrationTest {&#10;&#10;    @get:Rule&#10;    var hiltRule = HiltAndroidRule(this)&#10;&#10;    @Inject&#10;    lateinit var userRepository: UserRepository&#10;&#10;    @Inject&#10;    lateinit var database: LocalDB&#10;&#10;    @Before&#10;    fun setup() {&#10;        hiltRule.inject()&#10;    }&#10;&#10;    @After&#10;    fun tearDown() {&#10;        database.close()&#10;    }&#10;&#10;    @Test&#10;    fun testRegisterUser_success() = runBlocking {&#10;        val userId = userRepository.registerUser(&quot;testuser&quot;, &quot;password&quot;)&#10;        assertNotNull(userId)&#10;&#10;        val user = userRepository.getUserById(userId!!)&#10;        assertNotNull(user)&#10;        assertEquals(&quot;testuser&quot;, user.userName)&#10;        assertEquals(&quot;password&quot;, user.password)&#10;    }&#10;&#10;    @Test&#10;    fun testRegisterUser_duplicateUserName() = runBlocking {&#10;        userRepository.registerUser(&quot;testuser&quot;, &quot;password&quot;)&#10;        val userId = userRepository.registerUser(&quot;testuser&quot;, &quot;newpassword&quot;)&#10;        assertNull(userId)&#10;    }&#10;&#10;    @Test&#10;    fun testLoginUser_success() = runBlocking {&#10;        userRepository.registerUser(&quot;testuser&quot;, &quot;password&quot;)&#10;        val user = userRepository.loginUser(&quot;testuser&quot;)&#10;        assertNotNull(user)&#10;        assertEquals(&quot;testuser&quot;, user.userName)&#10;    }&#10;&#10;    @Test&#10;    fun testLoginUser_invalidUserName() = runBlocking {&#10;        val user = userRepository.loginUser(&quot;nonexistent&quot;)&#10;        assertNull(user)&#10;    }&#10;&#10;    @Test&#10;    fun testGetUserById_success() = runBlocking {&#10;        val userId = userRepository.registerUser(&quot;testuser&quot;, &quot;password&quot;)&#10;        val user = userRepository.getUserById(userId!!)&#10;        assertNotNull(user)&#10;        assertEquals(&quot;testuser&quot;, user.userName)&#10;    }&#10;&#10;    @Test&#10;    fun testGetUserById_invalidId() = runBlocking {&#10;        val user = userRepository.getUserById(999L)&#10;        assertNull(user)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>