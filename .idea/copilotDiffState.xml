<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/build.gradle.kts" />
              <option name="originalContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;    id(&quot;androidx.navigation.safeargs.kotlin&quot;)&#10;    id(&quot;com.google.dagger.hilt.android&quot;)&#10;    id(&quot;org.jetbrains.kotlin.kapt&quot;)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.example.ecommerce&quot;&#10;    compileSdk = 36&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.example.ecommerce&quot;&#10;        minSdk = 34&#10;        targetSdk = 36&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;        testInstrumentationRunner = &quot;com.example.ecommerce.HiltTestRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;), &quot;proguard-rules.pro&quot;)&#10;        }&#10;    }&#10;&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;    }&#10;    buildFeatures {&#10;        viewBinding = true&#10;    }&#10;}&#10;&#10;dependencies {&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.appcompat)&#10;    implementation(libs.material)&#10;    implementation(libs.androidx.activity)&#10;    implementation(libs.androidx.constraintlayout)&#10;    implementation(libs.room.runtime)&#10;    implementation(libs.room.ktx)&#10;    kapt(libs.room.compiler)&#10;    implementation(libs.datastore.preferences)&#10;    implementation(libs.datastore.core)&#10;    implementation(libs.retrofit)&#10;    implementation(libs.retrofit.gson)&#10;    implementation(libs.okhttp)&#10;    implementation(libs.okhttp.logging)&#10;    implementation(libs.lifecycle.viewmodel)&#10;    implementation(libs.lifecycle.livedata)&#10;    implementation(libs.lifecycle.runtime)&#10;    implementation(libs.navigation.fragment)&#10;    implementation(libs.navigation.ui)&#10;    implementation(&quot;com.google.dagger:hilt-android:2.51&quot;)&#10;    kapt(&quot;com.google.dagger:hilt-compiler:2.51&quot;)&#10;    implementation(&quot;androidx.hilt:hilt-navigation-fragment:1.2.0&quot;)&#10;    implementation(&quot;io.coil-kt:coil:2.7.0&quot;)&#10;    kapt(&quot;androidx.hilt:hilt-compiler:1.2.0&quot;)&#10;&#10;    // Unit test dependencies&#10;    testImplementation(libs.junit)&#10;    testImplementation(&quot;org.mockito:mockito-core:5.14.0&quot;)&#10;    testImplementation(&quot;org.mockito.kotlin:mockito-kotlin:5.4.0&quot;)&#10;    testImplementation(&quot;org.jetbrains.kotlinx:kotlinx-coroutines-test:1.9.0&quot;)&#10;    testImplementation(&quot;androidx.test:core:1.6.1&quot;)&#10;    testImplementation(&quot;androidx.test.ext:junit:1.2.1&quot;)&#10;    testImplementation(&quot;com.squareup.okhttp3:mockwebserver:4.12.0&quot;)&#10;    testImplementation(&quot;androidx.room:room-testing:2.6.1&quot;)&#10;    testImplementation(&quot;com.google.code.gson:gson:2.11.0&quot;)&#10;    testImplementation(&quot;com.google.dagger:hilt-android-testing:2.51&quot;)&#10;    kaptTest(&quot;com.google.dagger:hilt-compiler:2.51&quot;)&#10;    testImplementation(&quot;org.jetbrains.kotlin:kotlin-test:1.9.24&quot;)&#10;&#10;    // Android test dependencies&#10;    androidTestImplementation(&quot;androidx.test:core:1.6.1&quot;)&#10;    androidTestImplementation(&quot;androidx.test.ext:junit:1.2.1&quot;)&#10;    androidTestImplementation(&quot;androidx.test.espresso:espresso-core:3.6.1&quot;)&#10;    androidTestImplementation(&quot;androidx.test:runner:1.6.2&quot;)&#10;    androidTestImplementation(&quot;androidx.test:rules:1.6.1&quot;)&#10;    androidTestImplementation(&quot;androidx.navigation:navigation-testing:2.8.0&quot;)&#10;    androidTestImplementation(&quot;androidx.test.espresso:espresso-contrib:3.6.1&quot;)&#10;    androidTestImplementation(&quot;com.google.dagger:hilt-android-testing:2.51&quot;)&#10;    kaptAndroidTest(&quot;com.google.dagger:hilt-compiler:2.51&quot;)&#10;    debugImplementation(&quot;androidx.fragment:fragment-testing:1.8.4&quot;)&#10;    androidTestImplementation(&quot;org.jetbrains.kotlinx:kotlinx-coroutines-test:1.9.0&quot;)&#10;&#10;}&#10;&#10;configurations.all {&#10;    resolutionStrategy {&#10;        force(&quot;androidx.test:core:1.6.1&quot;)&#10;    }&#10;}" />
              <option name="updatedContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;    id(&quot;androidx.navigation.safeargs.kotlin&quot;)&#10;    id(&quot;com.google.dagger.hilt.android&quot;)&#10;    id(&quot;org.jetbrains.kotlin.kapt&quot;)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.example.ecommerce&quot;&#10;    compileSdk = 36&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.example.ecommerce&quot;&#10;        minSdk = 34&#10;        targetSdk = 36&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;        testInstrumentationRunner = &quot;com.example.ecommerce.HiltTestRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;), &quot;proguard-rules.pro&quot;)&#10;        }&#10;    }&#10;&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;    }&#10;    buildFeatures {&#10;        viewBinding = true&#10;    }&#10;}&#10;&#10;dependencies {&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.appcompat)&#10;    implementation(libs.material)&#10;    implementation(libs.androidx.activity)&#10;    implementation(libs.androidx.constraintlayout)&#10;    implementation(libs.room.runtime)&#10;    implementation(libs.room.ktx)&#10;    kapt(libs.room.compiler)&#10;    implementation(libs.datastore.preferences)&#10;    implementation(libs.datastore.core)&#10;    implementation(libs.retrofit)&#10;    implementation(libs.retrofit.gson)&#10;    implementation(libs.okhttp)&#10;    implementation(libs.okhttp.logging)&#10;    implementation(libs.lifecycle.viewmodel)&#10;    implementation(libs.lifecycle.livedata)&#10;    implementation(libs.lifecycle.runtime)&#10;    implementation(libs.navigation.fragment)&#10;    implementation(libs.navigation.ui)&#10;    implementation(&quot;com.google.dagger:hilt-android:2.51&quot;)&#10;    kapt(&quot;com.google.dagger:hilt-compiler:2.51&quot;)&#10;    implementation(&quot;androidx.hilt:hilt-navigation-fragment:1.2.0&quot;)&#10;    implementation(&quot;io.coil-kt:coil:2.7.0&quot;)&#10;    kapt(&quot;androidx.hilt:hilt-compiler:1.2.0&quot;)&#10;&#10;    // Unit test dependencies&#10;    testImplementation(libs.junit)&#10;    testImplementation(&quot;org.mockito:mockito-core:5.14.0&quot;)&#10;    testImplementation(&quot;org.mockito.kotlin:mockito-kotlin:5.4.0&quot;)&#10;    testImplementation(&quot;org.jetbrains.kotlinx:kotlinx-coroutines-test:1.9.0&quot;)&#10;    testImplementation(&quot;androidx.test:core:1.6.1&quot;)&#10;    testImplementation(&quot;androidx.test.ext:junit:1.2.1&quot;)&#10;    testImplementation(&quot;com.squareup.okhttp3:mockwebserver:4.12.0&quot;)&#10;    androidTestImplementation(&quot;com.squareup.okhttp3:mockwebserver:4.12.0&quot;)&#10;    testImplementation(&quot;androidx.room:room-testing:2.6.1&quot;)&#10;    testImplementation(&quot;com.google.code.gson:gson:2.11.0&quot;)&#10;    testImplementation(&quot;com.google.dagger:hilt-android-testing:2.51&quot;)&#10;    kaptTest(&quot;com.google.dagger:hilt-compiler:2.51&quot;)&#10;    testImplementation(&quot;org.jetbrains.kotlin:kotlin-test:1.9.24&quot;)&#10;&#10;    // Android test dependencies&#10;    androidTestImplementation(&quot;androidx.test:core:1.6.1&quot;)&#10;    androidTestImplementation(&quot;androidx.test.ext:junit:1.2.1&quot;)&#10;    androidTestImplementation(&quot;androidx.test.espresso:espresso-core:3.6.1&quot;)&#10;    androidTestImplementation(&quot;androidx.test:runner:1.6.2&quot;)&#10;    androidTestImplementation(&quot;androidx.test:rules:1.6.1&quot;)&#10;    androidTestImplementation(&quot;androidx.navigation:navigation-testing:2.8.0&quot;)&#10;    androidTestImplementation(&quot;androidx.test.espresso:espresso-contrib:3.6.1&quot;)&#10;    androidTestImplementation(&quot;com.google.dagger:hilt-android-testing:2.51&quot;)&#10;    kaptAndroidTest(&quot;com.google.dagger:hilt-compiler:2.51&quot;)&#10;    debugImplementation(&quot;androidx.fragment:fragment-testing:1.8.4&quot;)&#10;    androidTestImplementation(&quot;org.jetbrains.kotlinx:kotlinx-coroutines-test:1.9.0&quot;)&#10;&#10;}&#10;&#10;configurations.all {&#10;    resolutionStrategy {&#10;        force(&quot;androidx.test:core:1.6.1&quot;)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/androidTest/AndroidManifest.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/androidTest/AndroidManifest.xml" />
              <option name="originalContent" value="&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;application&gt;&#10;        &lt;activity&#10;            android:name=&quot;.HiltTestActivity&quot;&#10;            android:exported=&quot;false&quot;/&gt;&#10;    &lt;/application&gt;&#10;&lt;/manifest&gt;&#10;&#10;" />
              <option name="updatedContent" value="&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;application&gt;&#10;        &lt;activity&#10;            android:name=&quot;.HiltTestActivity&quot;&#10;            android:exported=&quot;false&quot;/&gt;&#10;    &lt;/application&gt;&#10;&lt;/manifest&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/androidTest/java/com/example/ecommerce/HiltTestActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/androidTest/java/com/example/ecommerce/HiltTestActivity.kt" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/androidTest/java/com/example/ecommerce/repo/OrdersRepositoryIntegrationTest.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/androidTest/java/com/example/ecommerce/repo/OrdersRepositoryIntegrationTest.kt" />
              <option name="originalContent" value="package com.example.ecommerce.data.repository&#10;&#10;import org.junit.runner.RunWith&#10;import org.junit.runners.JUnit4&#10;import com.example.ecommerce.data.db.dao.OrdersDao&#10;import com.example.ecommerce.data.db.entity.Order&#10;import dagger.hilt.android.testing.HiltAndroidRule&#10;import dagger.hilt.android.testing.HiltAndroidTest&#10;import kotlinx.coroutines.flow.first&#10;import kotlinx.coroutines.test.runTest&#10;import org.junit.Before&#10;import org.junit.Rule&#10;import org.junit.Test&#10;import javax.inject.Inject&#10;import org.junit.Assert.assertEquals&#10;import org.junit.Assert.assertNotNull&#10;import kotlin.collections.emptyList&#10;&#10;@HiltAndroidTest&#10;@RunWith(JUnit4::class)&#10;class OrdersRepositoryTest {&#10;&#10;    @get:Rule&#10;    var hiltRule = HiltAndroidRule(this)&#10;&#10;    @Inject&#10;    lateinit var ordersDao: OrdersDao&#10;&#10;    @Inject&#10;    lateinit var repository: OrdersRepository&#10;&#10;    @Before&#10;    fun setUp() {&#10;        hiltRule.inject()&#10;    }&#10;&#10;    @Test&#10;    fun placeOrder_insertsOrderAndReturnsOrderId() = runTest {&#10;        val order = Order(userId = 1L, productIds = listOf(1, 2))&#10;&#10;        val orderId = repository.placeOrder(order)&#10;&#10;        assertNotNull(orderId)&#10;        val orders = ordersDao.getOrdersByUser(1L).first()&#10;        assertEquals(listOf(order.copy(id = orderId)), orders)&#10;    }&#10;&#10;    @Test&#10;    fun getOrdersByUser_returnsOrdersForGivenUserId() = runTest {&#10;        val order1 = Order(userId = 1L, productIds = listOf(1, 2))&#10;        val order2 = Order(userId = 1L, productIds = listOf(3))&#10;        val order3 = Order(userId = 2L, productIds = listOf(4))&#10;        ordersDao.insertOrder(order1)&#10;        ordersDao.insertOrder(order2)&#10;        ordersDao.insertOrder(order3)&#10;&#10;        val orders = repository.getOrdersByUser(1L).first()&#10;        assertEquals(2, orders.size)&#10;        assertEquals(listOf(1L, 1L), orders.map { it.userId })&#10;    }&#10;&#10;    @Test&#10;    fun getOrdersByUser_returnsEmptyListForNonExistentUserId() = runTest {&#10;        val orders = repository.getOrdersByUser(999L).first()&#10;        assertEquals(emptyList&lt;Order&gt;(), orders)&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.ecommerce.repo&#10;&#10;import org.junit.runner.RunWith&#10;import org.junit.runners.JUnit4&#10;import com.example.ecommerce.data.db.dao.OrdersDao&#10;import com.example.ecommerce.data.db.entity.Order&#10;import com.example.ecommerce.data.repository.OrdersRepository&#10;import dagger.hilt.android.testing.HiltAndroidRule&#10;import dagger.hilt.android.testing.HiltAndroidTest&#10;import kotlinx.coroutines.flow.first&#10;import kotlinx.coroutines.test.runTest&#10;import org.junit.Before&#10;import org.junit.Rule&#10;import org.junit.Test&#10;import javax.inject.Inject&#10;import org.junit.Assert.assertEquals&#10;import org.junit.Assert.assertNotNull&#10;import kotlin.collections.emptyList&#10;&#10;@HiltAndroidTest&#10;@RunWith(JUnit4::class)&#10;class OrdersRepositoryIntegrationTest {&#10;&#10;    @get:Rule&#10;    var hiltRule = HiltAndroidRule(this)&#10;&#10;    @Inject&#10;    lateinit var ordersDao: OrdersDao&#10;&#10;    @Inject&#10;    lateinit var repository: OrdersRepository&#10;&#10;    @Before&#10;    fun setUp() {&#10;        hiltRule.inject()&#10;    }&#10;&#10;    @Test&#10;    fun placeOrder_insertsOrderAndReturnsOrderId() = runTest {&#10;        val order = Order(userId = 1L, productIds = listOf(1, 2))&#10;&#10;        val orderId = repository.placeOrder(order)&#10;&#10;        assertNotNull(orderId)&#10;        val orders = ordersDao.getOrdersByUser(1L).first()&#10;        assertEquals(listOf(order.copy(id = orderId)), orders)&#10;    }&#10;&#10;    @Test&#10;    fun getOrdersByUser_returnsOrdersForGivenUserId() = runTest {&#10;        val order1 = Order(userId = 1L, productIds = listOf(1, 2))&#10;        val order2 = Order(userId = 1L, productIds = listOf(3))&#10;        val order3 = Order(userId = 2L, productIds = listOf(4))&#10;        ordersDao.insertOrder(order1)&#10;        ordersDao.insertOrder(order2)&#10;        ordersDao.insertOrder(order3)&#10;&#10;        val orders = repository.getOrdersByUser(1L).first()&#10;        assertEquals(2, orders.size)&#10;        assertEquals(listOf(1L, 1L), orders.map { it.userId })&#10;    }&#10;&#10;    @Test&#10;    fun getOrdersByUser_returnsEmptyListForNonExistentUserId() = runTest {&#10;        val orders = repository.getOrdersByUser(999L).first()&#10;        assertEquals(emptyList&lt;Order&gt;(), orders)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/androidTest/java/com/example/ecommerce/repo/ProductRepositoryIntegrationTest.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/androidTest/java/com/example/ecommerce/repo/ProductRepositoryIntegrationTest.kt" />
              <option name="originalContent" value="package com.example.ecommerce.data.repository&#10;&#10;import androidx.test.ext.junit.runners.AndroidJUnit4&#10;import dagger.hilt.android.testing.HiltAndroidRule&#10;import dagger.hilt.android.testing.HiltAndroidTest&#10;import kotlinx.coroutines.runBlocking&#10;import okhttp3.mockwebserver.MockResponse&#10;import okhttp3.mockwebserver.MockWebServer&#10;import org.junit.After&#10;import org.junit.Before&#10;import org.junit.Rule&#10;import org.junit.Test&#10;import javax.inject.Inject&#10;import org.junit.Assert.assertEquals&#10;import org.junit.Assert.assertNotNull&#10;import org.junit.Assert.assertNull&#10;import org.junit.runner.RunWith&#10;&#10;@HiltAndroidTest&#10;@RunWith(AndroidJUnit4::class)&#10;class ProductRepositoryIntegrationTest  {&#10;&#10;    @get:Rule&#10;    var hiltRule = HiltAndroidRule(this)&#10;&#10;    @Inject&#10;    lateinit var productRepository: ProductRepository&#10;&#10;    @Inject&#10;    lateinit var mockWebServer: MockWebServer&#10;&#10;    @Before&#10;    fun setup() {&#10;        mockWebServer.start()&#10;        hiltRule.inject()&#10;    }&#10;&#10;    @After&#10;    fun tearDown() {&#10;        mockWebServer.shutdown()&#10;    }&#10;&#10;    @Test&#10;    fun testGetAllProducts_success() = runBlocking {&#10;        val mockResponse = &quot;&quot;&quot;&#10;            [&#10;                {&quot;id&quot;: 1, &quot;title&quot;: &quot;Product 1&quot;, &quot;price&quot;: 10.0, &quot;description&quot;: &quot;Desc 1&quot;, &quot;category&quot;: &quot;Cat 1&quot;, &quot;image&quot;: &quot;img1.jpg&quot;, &quot;rating&quot;: {&quot;rate&quot;: 4.5, &quot;count&quot;: 100}},&#10;                {&quot;id&quot;: 2, &quot;title&quot;: &quot;Product 2&quot;, &quot;price&quot;: 20.0, &quot;description&quot;: &quot;Desc 2&quot;, &quot;category&quot;: &quot;Cat 2&quot;, &quot;image&quot;: &quot;img2.jpg&quot;, &quot;rating&quot;: {&quot;rate&quot;: 4.0, &quot;count&quot;: 50}}&#10;            ]&#10;        &quot;&quot;&quot;.trimIndent()&#10;        mockWebServer.enqueue(MockResponse().setBody(mockResponse).setResponseCode(200))&#10;&#10;        val products = productRepository.getAllProducts()&#10;        assertNotNull(products)&#10;        assertEquals(2, products?.size)&#10;        assertEquals(&quot;Product 1&quot;, products?.get(0)?.title)&#10;        assertEquals(4.5, products?.get(0)?.rating?.rate)&#10;        assertEquals(&quot;Product 2&quot;, products?.get(1)?.title)&#10;    }&#10;&#10;    @Test&#10;    fun testGetAllProducts_failure() = runBlocking {&#10;        mockWebServer.enqueue(MockResponse().setResponseCode(500))&#10;&#10;        val products = productRepository.getAllProducts()&#10;        assertNull(products)&#10;    }&#10;&#10;    @Test&#10;    fun testGetProductById_success() = runBlocking {&#10;        val mockResponse = &quot;&quot;&quot;&#10;            {&quot;id&quot;: 1, &quot;title&quot;: &quot;Product 1&quot;, &quot;price&quot;: 10.0, &quot;description&quot;: &quot;Desc 1&quot;, &quot;category&quot;: &quot;Cat 1&quot;, &quot;image&quot;: &quot;img1.jpg&quot;, &quot;rating&quot;: {&quot;rate&quot;: 4.5, &quot;count&quot;: 100}}&#10;        &quot;&quot;&quot;.trimIndent()&#10;        mockWebServer.enqueue(MockResponse().setBody(mockResponse).setResponseCode(200))&#10;&#10;        val product = productRepository.getProductById(1)&#10;        assertNotNull(product)&#10;        assertEquals(&quot;Product 1&quot;, product?.title)&#10;        assertEquals(10.0, product?.price)&#10;        assertEquals(4.5, product?.rating?.rate)&#10;    }&#10;&#10;    @Test&#10;    fun testGetProductById_failure() = runBlocking {&#10;        mockWebServer.enqueue(MockResponse().setResponseCode(404))&#10;&#10;        val product = productRepository.getProductById(999)&#10;        assertNull(product)&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.ecommerce.repo&#10;&#10;import androidx.test.ext.junit.runners.AndroidJUnit4&#10;import dagger.hilt.android.testing.HiltAndroidRule&#10;import dagger.hilt.android.testing.HiltAndroidTest&#10;import kotlinx.coroutines.runBlocking&#10;import okhttp3.mockwebserver.MockResponse&#10;import okhttp3.mockwebserver.MockWebServer&#10;import org.junit.After&#10;import org.junit.Before&#10;import org.junit.Rule&#10;import org.junit.Test&#10;import javax.inject.Inject&#10;import org.junit.Assert.assertEquals&#10;import org.junit.Assert.assertNotNull&#10;import org.junit.Assert.assertNull&#10;import org.junit.runner.RunWith&#10;&#10;@HiltAndroidTest&#10;@RunWith(AndroidJUnit4::class)&#10;class ProductRepositoryIntegrationTest  {&#10;&#10;    @get:Rule&#10;    var hiltRule = HiltAndroidRule(this)&#10;&#10;    @Inject&#10;    lateinit var productRepository: ProductRepository&#10;&#10;    @Inject&#10;    lateinit var mockWebServer: MockWebServer&#10;&#10;    @Before&#10;    fun setup() {&#10;        mockWebServer.start()&#10;        hiltRule.inject()&#10;    }&#10;&#10;    @After&#10;    fun tearDown() {&#10;        mockWebServer.shutdown()&#10;    }&#10;&#10;    @Test&#10;    fun testGetAllProducts_success() = runBlocking {&#10;        val mockResponse = &quot;&quot;&quot;&#10;            [&#10;                {&quot;id&quot;: 1, &quot;title&quot;: &quot;Product 1&quot;, &quot;price&quot;: 10.0, &quot;description&quot;: &quot;Desc 1&quot;, &quot;category&quot;: &quot;Cat 1&quot;, &quot;image&quot;: &quot;img1.jpg&quot;, &quot;rating&quot;: {&quot;rate&quot;: 4.5, &quot;count&quot;: 100}},&#10;                {&quot;id&quot;: 2, &quot;title&quot;: &quot;Product 2&quot;, &quot;price&quot;: 20.0, &quot;description&quot;: &quot;Desc 2&quot;, &quot;category&quot;: &quot;Cat 2&quot;, &quot;image&quot;: &quot;img2.jpg&quot;, &quot;rating&quot;: {&quot;rate&quot;: 4.0, &quot;count&quot;: 50}}&#10;            ]&#10;        &quot;&quot;&quot;.trimIndent()&#10;        mockWebServer.enqueue(MockResponse().setBody(mockResponse).setResponseCode(200))&#10;&#10;        val products = productRepository.getAllProducts()&#10;        assertNotNull(products)&#10;        assertEquals(2, products?.size)&#10;        assertEquals(&quot;Product 1&quot;, products?.get(0)?.title)&#10;        assertEquals(4.5, products?.get(0)?.rating?.rate)&#10;        assertEquals(&quot;Product 2&quot;, products?.get(1)?.title)&#10;    }&#10;&#10;    @Test&#10;    fun testGetAllProducts_failure() = runBlocking {&#10;        mockWebServer.enqueue(MockResponse().setResponseCode(500))&#10;&#10;        val products = productRepository.getAllProducts()&#10;        assertNull(products)&#10;    }&#10;&#10;    @Test&#10;    fun testGetProductById_success() = runBlocking {&#10;        val mockResponse = &quot;&quot;&quot;&#10;            {&quot;id&quot;: 1, &quot;title&quot;: &quot;Product 1&quot;, &quot;price&quot;: 10.0, &quot;description&quot;: &quot;Desc 1&quot;, &quot;category&quot;: &quot;Cat 1&quot;, &quot;image&quot;: &quot;img1.jpg&quot;, &quot;rating&quot;: {&quot;rate&quot;: 4.5, &quot;count&quot;: 100}}&#10;        &quot;&quot;&quot;.trimIndent()&#10;        mockWebServer.enqueue(MockResponse().setBody(mockResponse).setResponseCode(200))&#10;&#10;        val product = productRepository.getProductById(1)&#10;        assertNotNull(product)&#10;        assertEquals(&quot;Product 1&quot;, product?.title)&#10;        assertEquals(10.0, product?.price)&#10;        assertEquals(4.5, product?.rating?.rate)&#10;    }&#10;&#10;    @Test&#10;    fun testGetProductById_failure() = runBlocking {&#10;        mockWebServer.enqueue(MockResponse().setResponseCode(404))&#10;&#10;        val product = productRepository.getProductById(999)&#10;        assertNull(product)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/androidTest/java/com/example/ecommerce/repo/UserPreferencesRepositoryIntegrationTest.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/androidTest/java/com/example/ecommerce/repo/UserPreferencesRepositoryIntegrationTest.kt" />
              <option name="originalContent" value="//package com.example.ecommerce.repo&#10;//&#10;//import androidx.datastore.core.DataStore&#10;//import androidx.datastore.preferences.core.Preferences&#10;//import androidx.datastore.preferences.preferencesDataStoreFile&#10;//import androidx.test.core.app.ApplicationProvider&#10;//import com.example.ecommerce.data.preferences.UserPreferencesRepository&#10;//import dagger.hilt.android.testing.HiltAndroidRule&#10;//import dagger.hilt.android.testing.HiltAndroidTest&#10;//import kotlinx.coroutines.flow.first&#10;//import kotlinx.coroutines.test.runTest&#10;//import org.junit.Before&#10;//import org.junit.Rule&#10;//import org.junit.Test&#10;//import javax.inject.Inject&#10;//import kotlin.test.assertEquals&#10;//import kotlin.test.assertFalse&#10;//import kotlin.test.assertTrue&#10;//&#10;//@HiltAndroidTest&#10;//class UserPreferencesRepositoryIntegrationTest {&#10;//&#10;//    @get:Rule&#10;//    var hiltRule = HiltAndroidRule(this)&#10;//&#10;//    @Inject&#10;//    lateinit var repository: UserPreferencesRepository&#10;//&#10;//    private lateinit var dataStore: DataStore&lt;Preferences&gt;&#10;//&#10;//    @Before&#10;//    fun setUp() {&#10;//        hiltRule.inject()&#10;//        val context = ApplicationProvider.getApplicationContext&lt;android.content.Context&gt;()&#10;//        dataStore = androidx.datastore.preferences.core.PreferenceDataStoreFactory.create {&#10;//            context.preferencesDataStoreFile(&quot;test_user_prefs&quot;)&#10;//        }&#10;//        repository = UserPreferencesRepository(context)&#10;//    }&#10;//&#10;//    @Test&#10;//    fun `saveUserId stores user ID in DataStore`() = runTest {&#10;//        repository.saveUserId(1L)&#10;//&#10;//        val userId = repository.userId.first()&#10;//        assertEquals(1L, userId)&#10;//    }&#10;//&#10;//    @Test&#10;//    fun `clearUserId removes user ID from DataStore`() = runTest {&#10;//        repository.saveUserId(1L)&#10;//&#10;//        repository.clearUserId()&#10;//&#10;//        val userId = repository.userId.first()&#10;//        assertEquals(null, userId)&#10;//    }&#10;//&#10;//    @Test&#10;//    fun `isLoggedIn returns true when user ID is set`() = runTest {&#10;//        repository.saveUserId(1L)&#10;//&#10;//        val isLoggedIn = repository.isLoggedIn.first()&#10;//        assertTrue(isLoggedIn)&#10;//    }&#10;//&#10;//    @Test&#10;//    fun `isLoggedIn returns false when user ID is not set`() = runTest {&#10;//        val isLoggedIn = repository.isLoggedIn.first()&#10;//        assertFalse(isLoggedIn)&#10;//    }&#10;//}" />
              <option name="updatedContent" value="//package com.example.ecommerce.repo&#10;//&#10;//import androidx.datastore.core.DataStore&#10;//import androidx.datastore.preferences.core.Preferences&#10;//import androidx.datastore.preferences.preferencesDataStoreFile&#10;//import androidx.test.core.app.ApplicationProvider&#10;//import com.example.ecommerce.data.preferences.UserPreferencesRepository&#10;//import dagger.hilt.android.testing.HiltAndroidRule&#10;//import dagger.hilt.android.testing.HiltAndroidTest&#10;//import kotlinx.coroutines.flow.first&#10;//import kotlinx.coroutines.test.runTest&#10;//import org.junit.Before&#10;//import org.junit.Rule&#10;//import org.junit.Test&#10;//import javax.inject.Inject&#10;//import org.junit.Assert.assertEquals&#10;//import org.junit.Assert.assertFalse&#10;//import org.junit.Assert.assertTrue&#10;//&#10;//@HiltAndroidTest&#10;//class UserPreferencesRepositoryIntegrationTest {&#10;//&#10;//    @get:Rule&#10;//    var hiltRule = HiltAndroidRule(this)&#10;//&#10;//    @Inject&#10;//    lateinit var repository: UserPreferencesRepository&#10;//&#10;//    private lateinit var dataStore: DataStore&lt;Preferences&gt;&#10;//&#10;//    @Before&#10;//    fun setUp() {&#10;//        hiltRule.inject()&#10;//        val context = ApplicationProvider.getApplicationContext&lt;android.content.Context&gt;()&#10;//        dataStore = androidx.datastore.preferences.core.PreferenceDataStoreFactory.create {&#10;//            context.preferencesDataStoreFile(&quot;test_user_prefs&quot;)&#10;//        }&#10;//        repository = UserPreferencesRepository(context)&#10;//    }&#10;//&#10;//    @Test&#10;//    fun `saveUserId stores user ID in DataStore`() = runTest {&#10;//        repository.saveUserId(1L)&#10;//&#10;//        val userId = repository.userId.first()&#10;//        assertEquals(1L, userId)&#10;//    }&#10;//&#10;//    @Test&#10;//    fun `clearUserId removes user ID from DataStore`() = runTest {&#10;//        repository.saveUserId(1L)&#10;//&#10;//        repository.clearUserId()&#10;//&#10;//        val userId = repository.userId.first()&#10;//        assertEquals(null, userId)&#10;//    }&#10;//&#10;//    @Test&#10;//    fun `isLoggedIn returns true when user ID is set`() = runTest {&#10;//        repository.saveUserId(1L)&#10;//&#10;//        val isLoggedIn = repository.isLoggedIn.first()&#10;//        assertTrue(isLoggedIn)&#10;//    }&#10;//&#10;//    @Test&#10;//    fun `isLoggedIn returns false when user ID is not set`() = runTest {&#10;//        val isLoggedIn = repository.isLoggedIn.first()&#10;//        assertFalse(isLoggedIn)&#10;//    }&#10;//}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/androidTest/java/com/example/ecommerce/repo/UserRepositoryIntegrationTest.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/androidTest/java/com/example/ecommerce/repo/UserRepositoryIntegrationTest.kt" />
              <option name="originalContent" value="package com.example.ecommerce.repo&#10;&#10;import androidx.test.ext.junit.runners.AndroidJUnit4&#10;import com.example.ecommerce.data.db.LocalDB&#10;import com.example.ecommerce.data.db.entity.User&#10;import com.example.ecommerce.data.repository.UserRepository&#10;import dagger.hilt.android.testing.HiltAndroidRule&#10;import dagger.hilt.android.testing.HiltAndroidTest&#10;import kotlinx.coroutines.test.runTest&#10;import org.junit.After&#10;import org.junit.Before&#10;import org.junit.Rule&#10;import org.junit.Test&#10;import org.junit.runner.RunWith&#10;import javax.inject.Inject&#10;import kotlin.test.assertEquals&#10;import kotlin.test.assertNotNull&#10;import kotlin.test.assertNull&#10;&#10;@HiltAndroidTest&#10;@RunWith(AndroidJUnit4::class)&#10;class UserRepositoryIntegrationTest {&#10;&#10;    @get:Rule&#10;    var hiltRule = HiltAndroidRule(this)&#10;&#10;    @Inject&#10;    lateinit var userRepository: UserRepository&#10;&#10;    @Inject&#10;    lateinit var database: LocalDB&#10;&#10;    @Before&#10;    fun setup() {&#10;        hiltRule.inject()&#10;    }&#10;&#10;    @After&#10;    fun tearDown() {&#10;        database.close()&#10;    }&#10;&#10;    @Test&#10;    fun testRegisterUser_success() = runTest {&#10;        val userId = userRepository.registerUser(&quot;testuser&quot;, &quot;password&quot;)&#10;        assertNotNull(userId)&#10;&#10;        val user = userRepository.getUserById(userId!!)&#10;        assertNotNull(user)&#10;        assertEquals(&quot;testuser&quot;, user.userName)&#10;        assertEquals(&quot;password&quot;, user.password)&#10;    }&#10;&#10;    @Test&#10;    fun testRegisterUser_duplicateUserName() = runTest {&#10;        userRepository.registerUser(&quot;testuser&quot;, &quot;password&quot;)&#10;        val userId = userRepository.registerUser(&quot;testuser&quot;, &quot;newpassword&quot;)&#10;        assertNull(userId)&#10;    }&#10;&#10;    @Test&#10;    fun testLoginUser_success() = runTest {&#10;        userRepository.registerUser(&quot;testuser&quot;, &quot;password&quot;)&#10;        val user = userRepository.loginUser(&quot;testuser&quot;)&#10;        assertNotNull(user)&#10;        assertEquals(&quot;testuser&quot;, user.userName)&#10;    }&#10;&#10;    @Test&#10;    fun testLoginUser_invalidUserName() = runTest {&#10;        val user = userRepository.loginUser(&quot;nonexistent&quot;)&#10;        assertNull(user)&#10;    }&#10;&#10;    @Test&#10;    fun testGetUserById_success() = runTest {&#10;        val userId = userRepository.registerUser(&quot;testuser&quot;, &quot;password&quot;)&#10;        val user = userRepository.getUserById(userId!!)&#10;        assertNotNull(user)&#10;        assertEquals(&quot;testuser&quot;, user.userName)&#10;    }&#10;&#10;    @Test&#10;    fun testGetUserById_invalidId() = runTest {&#10;        val user = userRepository.getUserById(999L)&#10;        assertNull(user)&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.ecommerce.repo&#10;&#10;import androidx.test.ext.junit.runners.AndroidJUnit4&#10;import com.example.ecommerce.data.db.LocalDB&#10;import com.example.ecommerce.data.db.entity.User&#10;import com.example.ecommerce.data.repository.UserRepository&#10;import dagger.hilt.android.testing.HiltAndroidRule&#10;import dagger.hilt.android.testing.HiltAndroidTest&#10;import kotlinx.coroutines.test.runTest&#10;import org.junit.After&#10;import org.junit.Before&#10;import org.junit.Rule&#10;import org.junit.Test&#10;import org.junit.runner.RunWith&#10;import javax.inject.Inject&#10;import org.junit.Assert.assertEquals&#10;import org.junit.Assert.assertNotNull&#10;import org.junit.Assert.assertNull&#10;&#10;@HiltAndroidTest&#10;@RunWith(AndroidJUnit4::class)&#10;class UserRepositoryIntegrationTest {&#10;&#10;    @get:Rule&#10;    var hiltRule = HiltAndroidRule(this)&#10;&#10;    @Inject&#10;    lateinit var userRepository: UserRepository&#10;&#10;    @Inject&#10;    lateinit var database: LocalDB&#10;&#10;    @Before&#10;    fun setup() {&#10;        hiltRule.inject()&#10;    }&#10;&#10;    @After&#10;    fun tearDown() {&#10;        database.close()&#10;    }&#10;&#10;    @Test&#10;    fun testRegisterUser_success() = runTest {&#10;        val userId = userRepository.registerUser(&quot;testuser&quot;, &quot;password&quot;)&#10;        assertNotNull(userId)&#10;&#10;        val user = userRepository.getUserById(userId!!)&#10;        assertNotNull(user)&#10;        assertEquals(&quot;testuser&quot;, user.userName)&#10;        assertEquals(&quot;password&quot;, user.password)&#10;    }&#10;&#10;    @Test&#10;    fun testRegisterUser_duplicateUserName() = runTest {&#10;        userRepository.registerUser(&quot;testuser&quot;, &quot;password&quot;)&#10;        val userId = userRepository.registerUser(&quot;testuser&quot;, &quot;newpassword&quot;)&#10;        assertNull(userId)&#10;    }&#10;&#10;    @Test&#10;    fun testLoginUser_success() = runTest {&#10;        userRepository.registerUser(&quot;testuser&quot;, &quot;password&quot;)&#10;        val user = userRepository.loginUser(&quot;testuser&quot;)&#10;        assertNotNull(user)&#10;        assertEquals(&quot;testuser&quot;, user.userName)&#10;    }&#10;&#10;    @Test&#10;    fun testLoginUser_invalidUserName() = runTest {&#10;        val user = userRepository.loginUser(&quot;nonexistent&quot;)&#10;        assertNull(user)&#10;    }&#10;&#10;    @Test&#10;    fun testGetUserById_success() = runTest {&#10;        val userId = userRepository.registerUser(&quot;testuser&quot;, &quot;password&quot;)&#10;        val user = userRepository.getUserById(userId!!)&#10;        assertNotNull(user)&#10;        assertEquals(&quot;testuser&quot;, user.userName)&#10;    }&#10;&#10;    @Test&#10;    fun testGetUserById_invalidId() = runTest {&#10;        val user = userRepository.getUserById(999L)&#10;        assertNull(user)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/androidTest/java/com/example/ecommerce/views/auth/HiltFragmentUtil.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/androidTest/java/com/example/ecommerce/views/auth/HiltFragmentUtil.kt" />
              <option name="updatedContent" value="package com.example.ecommerce.views.auth&#10;&#10;import android.os.Bundle&#10;import androidx.annotation.StyleRes&#10;import androidx.fragment.app.Fragment&#10;import androidx.fragment.app.testing.FragmentScenario&#10;import androidx.test.core.app.ApplicationProvider&#10;import dagger.hilt.android.testing.HiltAndroidRule&#10;import dagger.hilt.android.testing.HiltTestApplication&#10;&#10;inline fun &lt;reified T : Fragment&gt; launchFragmentInHiltContainer(&#10;    fragmentArgs: Bundle? = null,&#10;    @StyleRes themeResId: Int = R.style.Theme_Ecommerce,&#10;    crossinline action: T.() -&gt; Unit = {}&#10;): FragmentScenario&lt;T&gt; {&#10;    val scenario = FragmentScenario.launchInContainer(&#10;        T::class.java,&#10;        fragmentArgs,&#10;        themeResId,&#10;        object : FragmentFactory() {&#10;            override fun instantiate(classLoader: ClassLoader, className: String): Fragment {&#10;                val fragment = super.instantiate(classLoader, className)&#10;                (fragment as? T)?.apply(action)&#10;                return fragment&#10;            }&#10;        }&#10;    )&#10;    return scenario&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/androidTest/java/com/example/ecommerce/views/auth/home/MyProfileFragmentTest.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/androidTest/java/com/example/ecommerce/views/auth/home/MyProfileFragmentTest.kt" />
              <option name="originalContent" value="package com.example.ecommerce.views.home&#10;&#10;import androidx.fragment.app.FragmentFactory&#10;import androidx.navigation.Navigation&#10;import androidx.navigation.testing.TestNavHostController&#10;import androidx.test.core.app.ApplicationProvider&#10;import androidx.test.espresso.Espresso.onView&#10;import androidx.test.espresso.action.ViewActions&#10;import androidx.test.espresso.assertion.ViewAssertions&#10;import androidx.test.espresso.matcher.ViewMatchers&#10;import androidx.test.ext.junit.runners.AndroidJUnit4&#10;import androidx.test.platform.app.InstrumentationRegistry&#10;import com.example.ecommerce.R&#10;import com.example.ecommerce.launchFragmentInHiltContainer&#10;import dagger.hilt.android.testing.HiltAndroidRule&#10;import dagger.hilt.android.testing.HiltAndroidTest&#10;import kotlinx.coroutines.ExperimentalCoroutinesApi&#10;import org.junit.Before&#10;import org.junit.Rule&#10;import org.junit.Test&#10;import org.junit.runner.RunWith&#10;&#10;@HiltAndroidTest&#10;@RunWith(AndroidJUnit4::class)&#10;@ExperimentalCoroutinesApi&#10;class MyProfileFragmentTest {&#10;&#10;    @get:Rule&#10;    var hiltRule = HiltAndroidRule(this)&#10;&#10;    @Before&#10;    fun setup() {&#10;        hiltRule.inject()&#10;    }&#10;&#10;    @Test&#10;    fun testUiElementsAreDisplayed() {&#10;        launchFragmentInHiltContainer&lt;MyProfileFragment&gt;(&#10;            factory = FragmentFactory()&#10;        )&#10;&#10;       onView(ViewMatchers.withId(R.id.tvProfileGreeting))&#10;            .check(ViewAssertions.matches(ViewMatchers.isDisplayed()))&#10;&#10;        onView(ViewMatchers.withId(R.id.tvMyOrders))&#10;            .check(ViewAssertions.matches(ViewMatchers.isDisplayed()))&#10;&#10;        onView(ViewMatchers.withId(R.id.tvLogout))&#10;            .check(ViewAssertions.matches(ViewMatchers.isDisplayed()))&#10;    }&#10;&#10;    @Test&#10;    fun testLogoutClickNavigatesToLoginFragment() {&#10;        val navController = TestNavHostController(ApplicationProvider.getApplicationContext())&#10;&#10;        InstrumentationRegistry.getInstrumentation().runOnMainSync {&#10;            navController.setGraph(R.navigation.nav_graph)&#10;            navController.setCurrentDestination(R.id.myProfileFragment)&#10;        }&#10;&#10;        launchFragmentInHiltContainer&lt;MyProfileFragment&gt;(&#10;            factory = FragmentFactory()&#10;        ) {&#10;            Navigation.setViewNavController(this.requireView(), navController)&#10;        }&#10;&#10;        onView(ViewMatchers.withId(R.id.tvLogout)).perform(ViewActions.click())&#10;&#10;        assert(navController.currentDestination?.id == R.id.loginFragment)&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.ecommerce.views.home&#10;&#10;import androidx.fragment.app.FragmentFactory&#10;import androidx.navigation.Navigation&#10;import androidx.navigation.testing.TestNavHostController&#10;import androidx.test.core.app.ApplicationProvider&#10;import androidx.test.espresso.Espresso.onView&#10;import androidx.test.espresso.action.ViewActions&#10;import androidx.test.espresso.assertion.ViewAssertions&#10;import androidx.test.espresso.matcher.ViewMatchers&#10;import androidx.test.ext.junit.runners.AndroidJUnit4&#10;import androidx.test.filters.LargeTest&#10;import androidx.test.platform.app.InstrumentationRegistry&#10;import com.example.ecommerce.R&#10;import com.example.ecommerce.launchFragmentInHiltContainer&#10;import dagger.hilt.android.testing.HiltAndroidRule&#10;import dagger.hilt.android.testing.HiltAndroidTest&#10;import kotlinx.coroutines.ExperimentalCoroutinesApi&#10;import org.junit.Before&#10;import org.junit.Rule&#10;import org.junit.Test&#10;import org.junit.runner.RunWith&#10;&#10;@LargeTest&#10;@HiltAndroidTest&#10;@RunWith(AndroidJUnit4::class)&#10;@ExperimentalCoroutinesApi&#10;class MyProfileFragmentTest {&#10;&#10;    @get:Rule&#10;    var hiltRule = HiltAndroidRule(this)&#10;&#10;    @Before&#10;    fun setup() {&#10;        hiltRule.inject()&#10;    }&#10;&#10;    @Test&#10;    fun testUiElementsAreDisplayed() {&#10;        launchFragmentInHiltContainer&lt;MyProfileFragment&gt;(&#10;            factory = FragmentFactory()&#10;        )&#10;&#10;       onView(ViewMatchers.withId(R.id.tvProfileGreeting))&#10;            .check(ViewAssertions.matches(ViewMatchers.isDisplayed()))&#10;&#10;        onView(ViewMatchers.withId(R.id.tvMyOrders))&#10;            .check(ViewAssertions.matches(ViewMatchers.isDisplayed()))&#10;&#10;        onView(ViewMatchers.withId(R.id.tvLogout))&#10;            .check(ViewAssertions.matches(ViewMatchers.isDisplayed()))&#10;    }&#10;&#10;    @Test&#10;    fun testLogoutClickNavigatesToLoginFragment() {&#10;        val navController = TestNavHostController(ApplicationProvider.getApplicationContext())&#10;&#10;        InstrumentationRegistry.getInstrumentation().runOnMainSync {&#10;            navController.setGraph(R.navigation.nav_graph)&#10;            navController.setCurrentDestination(R.id.myProfileFragment)&#10;        }&#10;&#10;        launchFragmentInHiltContainer&lt;MyProfileFragment&gt;(&#10;            factory = FragmentFactory()&#10;        ) {&#10;            Navigation.setViewNavController(this.requireView(), navController)&#10;        }&#10;&#10;        onView(ViewMatchers.withId(R.id.tvLogout)).perform(ViewActions.click())&#10;&#10;        assert(navController.currentDestination?.id == R.id.loginFragment)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/ecommerce/views/home/TestFragment.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/ecommerce/views/home/TestFragment.kt" />
              <option name="originalContent" value="package com.example.ecommerce.views.home&#10;&#10;import android.os.Bundle&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import androidx.fragment.app.Fragment&#10;import com.example.ecommerce.databinding.FragmentMyFeedBinding&#10;import dagger.hilt.android.AndroidEntryPoint&#10;&#10;@AndroidEntryPoint&#10;class TestFragment: Fragment() {&#10;    &#10;    private val _binding: TestFragment?  = null&#10;    private val binding get() = _binding!!&#10;    &#10;    override fun onCreateView(&#10;        inflater: LayoutInflater,&#10;        container: ViewGroup?,&#10;        savedInstanceState: Bundle?&#10;    ): View {&#10;        _binding = TestFragment.&#10;        return binding.root&#10;    }&#10;&#10;}" />
              <option name="updatedContent" value="package com.example.ecommerce.views.home&#10;&#10;import android.os.Bundle&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import androidx.fragment.app.Fragment&#10;import com.example.ecommerce.databinding.FragmentTestBinding&#10;import dagger.hilt.android.AndroidEntryPoint&#10;&#10;@AndroidEntryPoint&#10;class TestFragment : Fragment() {&#10;&#10;    private var _binding: FragmentTestBinding? = null&#10;    private val binding get() = _binding!!&#10;&#10;    override fun onCreateView(&#10;        inflater: LayoutInflater,&#10;        container: ViewGroup?,&#10;        savedInstanceState: Bundle?&#10;    ): View {&#10;        _binding = FragmentTestBinding.inflate(inflater, container, false)&#10;        return binding.root&#10;    }&#10;&#10;    override fun onDestroyView() {&#10;        super.onDestroyView()&#10;        _binding = null&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/test/java/com/example/ecommerce/di/TestAppModule.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/test/java/com/example/ecommerce/di/TestAppModule.kt" />
              <option name="originalContent" value="package com.example.ecommerce.di&#10;&#10;import android.content.Context&#10;import androidx.datastore.core.DataStore&#10;import androidx.datastore.preferences.core.Preferences&#10;import androidx.datastore.preferences.core.PreferenceDataStoreFactory&#10;import androidx.datastore.preferences.preferencesDataStoreFile&#10;import androidx.room.Room&#10;import com.example.ecommerce.data.api.ProductApiService&#10;import com.example.ecommerce.data.db.LocalDB&#10;import com.example.ecommerce.data.db.dao.OrdersDao&#10;import com.example.ecommerce.data.db.dao.UserDao&#10;import com.example.ecommerce.data.preferences.UserPreferencesRepository&#10;import com.example.ecommerce.data.repository.OrdersRepository&#10;import com.example.ecommerce.data.repository.ProductRepository&#10;import dagger.Module&#10;import dagger.Provides&#10;import dagger.hilt.android.qualifiers.ApplicationContext&#10;import dagger.hilt.components.SingletonComponent&#10;import dagger.hilt.testing.TestInstallIn&#10;import javax.inject.Singleton&#10;&#10;@Module&#10;@TestInstallIn(&#10;    components = [SingletonComponent::class],&#10;    replaces = [DatabaseModule::class, RepositoryModule::class, PreferencesModule::class, NetworkModule::class]&#10;)&#10;object TestAppModule {&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideDatabase(@ApplicationContext context: Context): LocalDB {&#10;        return Room.inMemoryDatabaseBuilder(context, LocalDB::class.java)&#10;            .allowMainThreadQueries()&#10;            .build()&#10;    }&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideUserDao(database: LocalDB): UserDao = database.userDao()&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideOrdersDao(database: LocalDB): OrdersDao = database.ordersDao()&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideDataStore(@ApplicationContext context: Context): DataStore&lt;Preferences&gt; {&#10;        return PreferenceDataStoreFactory.create {&#10;            context.preferencesDataStoreFile(&quot;test_user_prefs&quot;)&#10;        }&#10;    }&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideUserPreferencesRepository(@ApplicationContext context: Context): UserPreferencesRepository {&#10;        return UserPreferencesRepository(context)&#10;    }&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideOrdersRepository(ordersDao: OrdersDao): OrdersRepository {&#10;        return OrdersRepository(ordersDao)&#10;    }&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideProductRepository(productApiService: ProductApiService): ProductRepository {&#10;        return ProductRepository(productApiService)&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.ecommerce.di&#10;&#10;import android.content.Context&#10;import androidx.datastore.core.DataStore&#10;import androidx.datastore.preferences.core.Preferences&#10;import androidx.datastore.preferences.core.PreferenceDataStoreFactory&#10;import androidx.datastore.preferences.preferencesDataStoreFile&#10;import androidx.room.Room&#10;import com.example.ecommerce.data.api.ProductApiService&#10;import com.example.ecommerce.data.db.LocalDB&#10;import com.example.ecommerce.data.db.dao.OrdersDao&#10;import com.example.ecommerce.data.db.dao.UserDao&#10;import com.example.ecommerce.data.preferences.UserPreferencesRepository&#10;import com.example.ecommerce.data.repository.OrdersRepository&#10;import com.example.ecommerce.data.repository.ProductRepository&#10;import dagger.Module&#10;import dagger.Provides&#10;import dagger.hilt.android.qualifiers.ApplicationContext&#10;import dagger.hilt.components.SingletonComponent&#10;import dagger.hilt.testing.TestInstallIn&#10;import javax.inject.Singleton&#10;&#10;@Module&#10;@TestInstallIn(&#10;    components = [SingletonComponent::class],&#10;    replaces = [DatabaseModule::class, RepositoryModule::class, PreferencesModule::class, NetworkModule::class]&#10;)&#10;object TestAppModule {&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideDatabase(@ApplicationContext context: Context): LocalDB {&#10;        return Room.inMemoryDatabaseBuilder(context, LocalDB::class.java)&#10;            .allowMainThreadQueries()&#10;            .build()&#10;    }&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideUserDao(database: LocalDB): UserDao = database.userDao()&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideOrdersDao(database: LocalDB): OrdersDao = database.ordersDao()&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideDataStore(@ApplicationContext context: Context): DataStore&lt;Preferences&gt; {&#10;        return PreferenceDataStoreFactory.create {&#10;            context.preferencesDataStoreFile(&quot;test_user_prefs&quot;)&#10;        }&#10;    }&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideUserPreferencesRepository(@ApplicationContext context: Context): UserPreferencesRepository {&#10;        return UserPreferencesRepository(context)&#10;    }&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideOrdersRepository(ordersDao: OrdersDao): OrdersRepository {&#10;        return OrdersRepository(ordersDao)&#10;    }&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideProductRepository(productApiService: ProductApiService): ProductRepository {&#10;        return ProductRepository(productApiService)&#10;    }&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideUserRepository(userDao: UserDao): com.example.ecommerce.data.repository.UserRepository {&#10;        return com.example.ecommerce.data.repository.UserRepository(userDao)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/test/java/com/example/ecommerce/repo/OrdersRepositoryIntegrationTest.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/test/java/com/example/ecommerce/repo/OrdersRepositoryIntegrationTest.kt" />
              <option name="originalContent" value="package com.example.ecommerce.data.repository&#10;&#10;import org.junit.runner.RunWith&#10;import org.junit.runners.JUnit4&#10;import com.example.ecommerce.data.db.dao.OrdersDao&#10;import com.example.ecommerce.data.db.entity.Order&#10;import dagger.hilt.android.testing.HiltAndroidRule&#10;import dagger.hilt.android.testing.HiltAndroidTest&#10;import kotlinx.coroutines.flow.first&#10;import kotlinx.coroutines.test.runTest&#10;import org.junit.Before&#10;import org.junit.Rule&#10;import org.junit.Test&#10;import org.junit.runner.RunWith&#10;import javax.inject.Inject&#10;import kotlin.test.assertEquals&#10;import kotlin.test.assertNotNull&#10;&#10;@HiltAndroidTest&#10;@RunWith(JUnit4::class)&#10;class OrdersRepositoryTest {&#10;&#10;    @get:Rule&#10;    var hiltRule = HiltAndroidRule(this)&#10;&#10;    @Inject&#10;    lateinit var ordersDao: OrdersDao&#10;&#10;    @Inject&#10;    lateinit var repository: OrdersRepository&#10;&#10;    @Before&#10;    fun setUp() {&#10;        hiltRule.inject()&#10;    }&#10;&#10;    @Test&#10;    fun placeOrder_insertsOrderAndReturnsOrderId() = runTest {&#10;        val order = Order(userId = 1L, productIds = listOf(1, 2))&#10;&#10;        val orderId = repository.placeOrder(order)&#10;&#10;        assertNotNull(orderId)&#10;        val orders = ordersDao.getOrdersByUser(1L).first()&#10;        assertEquals(listOf(order.copy(id = orderId)), orders)&#10;    }&#10;&#10;    @Test&#10;    fun getOrdersByUser_returnsOrdersForGivenUserId() = runTest {&#10;        val order1 = Order(userId = 1L, productIds = listOf(1, 2))&#10;        val order2 = Order(userId = 1L, productIds = listOf(3))&#10;        val order3 = Order(userId = 2L, productIds = listOf(4))&#10;        ordersDao.insertOrder(order1)&#10;        ordersDao.insertOrder(order2)&#10;        ordersDao.insertOrder(order3)&#10;&#10;        val orders = repository.getOrdersByUser(1L).first()&#10;        assertEquals(2, orders.size)&#10;        assertEquals(listOf(1L, 1L), orders.map { it.userId })&#10;    }&#10;&#10;    @Test&#10;    fun getOrdersByUser_returnsEmptyListForNonExistentUserId() = runTest {&#10;        val orders = repository.getOrdersByUser(999L).first()&#10;        assertEquals(emptyList(), orders)&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.ecommerce.data.repository&#10;&#10;import org.junit.runner.RunWith&#10;import org.junit.runners.JUnit4&#10;import com.example.ecommerce.data.db.dao.OrdersDao&#10;import com.example.ecommerce.data.db.entity.Order&#10;import dagger.hilt.android.testing.HiltAndroidRule&#10;import dagger.hilt.android.testing.HiltAndroidTest&#10;import kotlinx.coroutines.flow.first&#10;import kotlinx.coroutines.test.runTest&#10;import org.junit.Before&#10;import org.junit.Rule&#10;import org.junit.Test&#10;import javax.inject.Inject&#10;import kotlin.test.assertEquals&#10;import kotlin.test.assertNotNull&#10;&#10;@HiltAndroidTest&#10;@RunWith(JUnit4::class)&#10;class OrdersRepositoryTest {&#10;&#10;    @get:Rule&#10;    var hiltRule = HiltAndroidRule(this)&#10;&#10;    @Inject&#10;    lateinit var ordersDao: OrdersDao&#10;&#10;    @Inject&#10;    lateinit var repository: OrdersRepository&#10;&#10;    @Before&#10;    fun setUp() {&#10;        hiltRule.inject()&#10;    }&#10;&#10;    @Test&#10;    fun placeOrder_insertsOrderAndReturnsOrderId() = runTest {&#10;        val order = Order(userId = 1L, productIds = listOf(1, 2))&#10;&#10;        val orderId = repository.placeOrder(order)&#10;&#10;        assertNotNull(orderId)&#10;        val orders = ordersDao.getOrdersByUser(1L).first()&#10;        assertEquals(listOf(order.copy(id = orderId)), orders)&#10;    }&#10;&#10;    @Test&#10;    fun getOrdersByUser_returnsOrdersForGivenUserId() = runTest {&#10;        val order1 = Order(userId = 1L, productIds = listOf(1, 2))&#10;        val order2 = Order(userId = 1L, productIds = listOf(3))&#10;        val order3 = Order(userId = 2L, productIds = listOf(4))&#10;        ordersDao.insertOrder(order1)&#10;        ordersDao.insertOrder(order2)&#10;        ordersDao.insertOrder(order3)&#10;&#10;        val orders = repository.getOrdersByUser(1L).first()&#10;        assertEquals(2, orders.size)&#10;        assertEquals(listOf(1L, 1L), orders.map { it.userId })&#10;    }&#10;&#10;    @Test&#10;    fun getOrdersByUser_returnsEmptyListForNonExistentUserId() = runTest {&#10;        val orders = repository.getOrdersByUser(999L).first()&#10;        assertEquals(emptyList(), orders)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/test/java/com/example/ecommerce/repo/ProductRepositoryIntegrationTest.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/test/java/com/example/ecommerce/repo/ProductRepositoryIntegrationTest.kt" />
              <option name="originalContent" value="package com.example.ecommerce.data.repository&#10;&#10;import androidx.test.ext.junit.runners.AndroidJUnit4&#10;import com.example.ecommerce.data.model.Product&#10;import com.example.ecommerce.data.model.Rating&#10;import dagger.hilt.android.testing.HiltAndroidRule&#10;import dagger.hilt.android.testing.HiltAndroidTest&#10;import kotlinx.coroutines.runBlocking&#10;import okhttp3.mockwebserver.MockResponse&#10;import okhttp3.mockwebserver.MockWebServer&#10;import org.junit.After&#10;import org.junit.Before&#10;import org.junit.Rule&#10;import org.junit.Test&#10;import org.junit.runner.RunWith&#10;import javax.inject.Inject&#10;import kotlin.test.assertEquals&#10;import kotlin.test.assertNotNull&#10;import kotlin.test.assertNull&#10;&#10;@HiltAndroidTest&#10;@RunWith(AndroidJUnit4::class)&#10;class ProductRepositoryTest {&#10;&#10;    @get:Rule&#10;    var hiltRule = HiltAndroidRule(this)&#10;&#10;    @Inject&#10;    lateinit var productRepository: ProductRepository&#10;&#10;    @Inject&#10;    lateinit var mockWebServer: MockWebServer&#10;&#10;    @Before&#10;    fun setup() {&#10;        mockWebServer.start()&#10;        hiltRule.inject()&#10;    }&#10;&#10;    @After&#10;    fun tearDown() {&#10;        mockWebServer.shutdown()&#10;    }&#10;&#10;    @Test&#10;    fun testGetAllProducts_success() = runBlocking {&#10;        val mockResponse = &quot;&quot;&quot;&#10;            [&#10;                {&quot;id&quot;: 1, &quot;title&quot;: &quot;Product 1&quot;, &quot;price&quot;: 10.0, &quot;description&quot;: &quot;Desc 1&quot;, &quot;category&quot;: &quot;Cat 1&quot;, &quot;image&quot;: &quot;img1.jpg&quot;, &quot;rating&quot;: {&quot;rate&quot;: 4.5, &quot;count&quot;: 100}},&#10;                {&quot;id&quot;: 2, &quot;title&quot;: &quot;Product 2&quot;, &quot;price&quot;: 20.0, &quot;description&quot;: &quot;Desc 2&quot;, &quot;category&quot;: &quot;Cat 2&quot;, &quot;image&quot;: &quot;img2.jpg&quot;, &quot;rating&quot;: {&quot;rate&quot;: 4.0, &quot;count&quot;: 50}}&#10;            ]&#10;        &quot;&quot;&quot;.trimIndent()&#10;        mockWebServer.enqueue(MockResponse().setBody(mockResponse).setResponseCode(200))&#10;&#10;        val products = productRepository.getAllProducts()&#10;        assertNotNull(products)&#10;        assertEquals(2, products.size)&#10;        assertEquals(&quot;Product 1&quot;, products[0].title)&#10;        assertEquals(4.5, products[0].rating.rate)&#10;        assertEquals(&quot;Product 2&quot;, products[1].title)&#10;    }&#10;&#10;    @Test&#10;    fun testGetAllProducts_failure() = runBlocking {&#10;        mockWebServer.enqueue(MockResponse().setResponseCode(500))&#10;&#10;        val products = productRepository.getAllProducts()&#10;        assertNull(products)&#10;    }&#10;&#10;    @Test&#10;    fun testGetProductById_success() = runBlocking {&#10;        val mockResponse = &quot;&quot;&quot;&#10;            {&quot;id&quot;: 1, &quot;title&quot;: &quot;Product 1&quot;, &quot;price&quot;: 10.0, &quot;description&quot;: &quot;Desc 1&quot;, &quot;category&quot;: &quot;Cat 1&quot;, &quot;image&quot;: &quot;img1.jpg&quot;, &quot;rating&quot;: {&quot;rate&quot;: 4.5, &quot;count&quot;: 100}}&#10;        &quot;&quot;&quot;.trimIndent()&#10;        mockWebServer.enqueue(MockResponse().setBody(mockResponse).setResponseCode(200))&#10;&#10;        val product = productRepository.getProductById(1)&#10;        assertNotNull(product)&#10;        assertEquals(&quot;Product 1&quot;, product.title)&#10;        assertEquals(10.0, product.price)&#10;        assertEquals(4.5, product.rating.rate)&#10;    }&#10;&#10;    @Test&#10;    fun testGetProductById_failure() = runBlocking {&#10;        mockWebServer.enqueue(MockResponse().setResponseCode(404))&#10;&#10;        val product = productRepository.getProductById(999)&#10;        assertNull(product)&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.ecommerce.data.repository&#10;&#10;import com.example.ecommerce.data.model.Product&#10;import com.example.ecommerce.data.model.Rating&#10;import dagger.hilt.android.testing.HiltAndroidRule&#10;import dagger.hilt.android.testing.HiltAndroidTest&#10;import kotlinx.coroutines.runBlocking&#10;import okhttp3.mockwebserver.MockResponse&#10;import okhttp3.mockwebserver.MockWebServer&#10;import org.junit.After&#10;import org.junit.Before&#10;import org.junit.Rule&#10;import org.junit.Test&#10;import org.junit.runner.RunWith&#10;import org.junit.runners.JUnit4&#10;import javax.inject.Inject&#10;import kotlin.test.assertEquals&#10;import kotlin.test.assertNotNull&#10;import kotlin.test.assertNull&#10;&#10;@HiltAndroidTest&#10;@RunWith(JUnit4::class)&#10;class ProductRepositoryTest {&#10;&#10;    @get:Rule&#10;    var hiltRule = HiltAndroidRule(this)&#10;&#10;    @Inject&#10;    lateinit var productRepository: ProductRepository&#10;&#10;    @Inject&#10;    lateinit var mockWebServer: MockWebServer&#10;&#10;    @Before&#10;    fun setup() {&#10;        mockWebServer.start()&#10;        hiltRule.inject()&#10;    }&#10;&#10;    @After&#10;    fun tearDown() {&#10;        mockWebServer.shutdown()&#10;    }&#10;&#10;    @Test&#10;    fun testGetAllProducts_success() = runBlocking {&#10;        val mockResponse = &quot;&quot;&quot;&#10;            [&#10;                {&quot;id&quot;: 1, &quot;title&quot;: &quot;Product 1&quot;, &quot;price&quot;: 10.0, &quot;description&quot;: &quot;Desc 1&quot;, &quot;category&quot;: &quot;Cat 1&quot;, &quot;image&quot;: &quot;img1.jpg&quot;, &quot;rating&quot;: {&quot;rate&quot;: 4.5, &quot;count&quot;: 100}},&#10;                {&quot;id&quot;: 2, &quot;title&quot;: &quot;Product 2&quot;, &quot;price&quot;: 20.0, &quot;description&quot;: &quot;Desc 2&quot;, &quot;category&quot;: &quot;Cat 2&quot;, &quot;image&quot;: &quot;img2.jpg&quot;, &quot;rating&quot;: {&quot;rate&quot;: 4.0, &quot;count&quot;: 50}}&#10;            ]&#10;        &quot;&quot;&quot;.trimIndent()&#10;        mockWebServer.enqueue(MockResponse().setBody(mockResponse).setResponseCode(200))&#10;&#10;        val products = productRepository.getAllProducts()&#10;        assertNotNull(products)&#10;        assertEquals(2, products.size)&#10;        assertEquals(&quot;Product 1&quot;, products[0].title)&#10;        assertEquals(4.5, products[0].rating.rate)&#10;        assertEquals(&quot;Product 2&quot;, products[1].title)&#10;    }&#10;&#10;    @Test&#10;    fun testGetAllProducts_failure() = runBlocking {&#10;        mockWebServer.enqueue(MockResponse().setResponseCode(500))&#10;&#10;        val products = productRepository.getAllProducts()&#10;        assertNull(products)&#10;    }&#10;&#10;    @Test&#10;    fun testGetProductById_success() = runBlocking {&#10;        val mockResponse = &quot;&quot;&quot;&#10;            {&quot;id&quot;: 1, &quot;title&quot;: &quot;Product 1&quot;, &quot;price&quot;: 10.0, &quot;description&quot;: &quot;Desc 1&quot;, &quot;category&quot;: &quot;Cat 1&quot;, &quot;image&quot;: &quot;img1.jpg&quot;, &quot;rating&quot;: {&quot;rate&quot;: 4.5, &quot;count&quot;: 100}}&#10;        &quot;&quot;&quot;.trimIndent()&#10;        mockWebServer.enqueue(MockResponse().setBody(mockResponse).setResponseCode(200))&#10;&#10;        val product = productRepository.getProductById(1)&#10;        assertNotNull(product)&#10;        assertEquals(&quot;Product 1&quot;, product.title)&#10;        assertEquals(10.0, product.price)&#10;        assertEquals(4.5, product.rating.rate)&#10;    }&#10;&#10;    @Test&#10;    fun testGetProductById_failure() = runBlocking {&#10;        mockWebServer.enqueue(MockResponse().setResponseCode(404))&#10;&#10;        val product = productRepository.getProductById(999)&#10;        assertNull(product)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/test/java/com/example/ecommerce/repo/UserRepositoryIntegrationTest.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/test/java/com/example/ecommerce/repo/UserRepositoryIntegrationTest.kt" />
              <option name="originalContent" value="package com.example.ecommerce.repo&#10;&#10;import androidx.test.ext.junit.runners.AndroidJUnit4&#10;import com.example.ecommerce.data.db.LocalDB&#10;import com.example.ecommerce.data.db.entity.User&#10;import com.example.ecommerce.data.repository.UserRepository&#10;import dagger.hilt.android.testing.HiltAndroidRule&#10;import dagger.hilt.android.testing.HiltAndroidTest&#10;import kotlinx.coroutines.runBlocking&#10;import org.junit.After&#10;import org.junit.Before&#10;import org.junit.Rule&#10;import org.junit.Test&#10;import org.junit.runner.RunWith&#10;import javax.inject.Inject&#10;import kotlin.test.assertEquals&#10;import kotlin.test.assertNotNull&#10;import kotlin.test.assertNull&#10;&#10;@HiltAndroidTest&#10;@RunWith(AndroidJUnit4::class)&#10;class UserRepositoryIntegrationTest {&#10;&#10;    @get:Rule&#10;    var hiltRule = HiltAndroidRule(this)&#10;&#10;    @Inject&#10;    lateinit var userRepository: UserRepository&#10;&#10;    @Inject&#10;    lateinit var database: LocalDB&#10;&#10;    @Before&#10;    fun setup() {&#10;        hiltRule.inject()&#10;    }&#10;&#10;    @After&#10;    fun tearDown() {&#10;        database.close()&#10;    }&#10;&#10;    @Test&#10;    fun testRegisterUser_success() = runBlocking {&#10;        val userId = userRepository.registerUser(&quot;testuser&quot;, &quot;password&quot;)&#10;        assertNotNull(userId)&#10;&#10;        val user = userRepository.getUserById(userId!!)&#10;        assertNotNull(user)&#10;        assertEquals(&quot;testuser&quot;, user.userName)&#10;        assertEquals(&quot;password&quot;, user.password)&#10;    }&#10;&#10;    @Test&#10;    fun testRegisterUser_duplicateUserName() = runBlocking {&#10;        userRepository.registerUser(&quot;testuser&quot;, &quot;password&quot;)&#10;        val userId = userRepository.registerUser(&quot;testuser&quot;, &quot;newpassword&quot;)&#10;        assertNull(userId)&#10;    }&#10;&#10;    @Test&#10;    fun testLoginUser_success() = runBlocking {&#10;        userRepository.registerUser(&quot;testuser&quot;, &quot;password&quot;)&#10;        val user = userRepository.loginUser(&quot;testuser&quot;)&#10;        assertNotNull(user)&#10;        assertEquals(&quot;testuser&quot;, user.userName)&#10;    }&#10;&#10;    @Test&#10;    fun testLoginUser_invalidUserName() = runBlocking {&#10;        val user = userRepository.loginUser(&quot;nonexistent&quot;)&#10;        assertNull(user)&#10;    }&#10;&#10;    @Test&#10;    fun testGetUserById_success() = runBlocking {&#10;        val userId = userRepository.registerUser(&quot;testuser&quot;, &quot;password&quot;)&#10;        val user = userRepository.getUserById(userId!!)&#10;        assertNotNull(user)&#10;        assertEquals(&quot;testuser&quot;, user.userName)&#10;    }&#10;&#10;    @Test&#10;    fun testGetUserById_invalidId() = runBlocking {&#10;        val user = userRepository.getUserById(999L)&#10;        assertNull(user)&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.ecommerce.repo&#10;&#10;import org.junit.runner.RunWith&#10;import org.junit.runners.JUnit4&#10;import com.example.ecommerce.data.db.LocalDB&#10;import com.example.ecommerce.data.db.entity.User&#10;import com.example.ecommerce.data.repository.UserRepository&#10;import dagger.hilt.android.testing.HiltAndroidRule&#10;import dagger.hilt.android.testing.HiltAndroidTest&#10;import kotlinx.coroutines.runBlocking&#10;import org.junit.After&#10;import org.junit.Before&#10;import org.junit.Rule&#10;import org.junit.Test&#10;import javax.inject.Inject&#10;import kotlin.test.assertEquals&#10;import kotlin.test.assertNotNull&#10;import kotlin.test.assertNull&#10;&#10;@HiltAndroidTest&#10;@RunWith(JUnit4::class)&#10;class UserRepositoryIntegrationTest {&#10;&#10;    @get:Rule&#10;    var hiltRule = HiltAndroidRule(this)&#10;&#10;    @Inject&#10;    lateinit var userRepository: UserRepository&#10;&#10;    @Inject&#10;    lateinit var database: LocalDB&#10;&#10;    @Before&#10;    fun setup() {&#10;        hiltRule.inject()&#10;    }&#10;&#10;    @After&#10;    fun tearDown() {&#10;        database.close()&#10;    }&#10;&#10;    @Test&#10;    fun testRegisterUser_success() = runBlocking {&#10;        val userId = userRepository.registerUser(&quot;testuser&quot;, &quot;password&quot;)&#10;        assertNotNull(userId)&#10;&#10;        val user = userRepository.getUserById(userId!!)&#10;        assertNotNull(user)&#10;        assertEquals(&quot;testuser&quot;, user.userName)&#10;        assertEquals(&quot;password&quot;, user.password)&#10;    }&#10;&#10;    @Test&#10;    fun testRegisterUser_duplicateUserName() = runBlocking {&#10;        userRepository.registerUser(&quot;testuser&quot;, &quot;password&quot;)&#10;        val userId = userRepository.registerUser(&quot;testuser&quot;, &quot;newpassword&quot;)&#10;        assertNull(userId)&#10;    }&#10;&#10;    @Test&#10;    fun testLoginUser_success() = runBlocking {&#10;        userRepository.registerUser(&quot;testuser&quot;, &quot;password&quot;)&#10;        val user = userRepository.loginUser(&quot;testuser&quot;)&#10;        assertNotNull(user)&#10;        assertEquals(&quot;testuser&quot;, user.userName)&#10;    }&#10;&#10;    @Test&#10;    fun testLoginUser_invalidUserName() = runBlocking {&#10;        val user = userRepository.loginUser(&quot;nonexistent&quot;)&#10;        assertNull(user)&#10;    }&#10;&#10;    @Test&#10;    fun testGetUserById_success() = runBlocking {&#10;        val userId = userRepository.registerUser(&quot;testuser&quot;, &quot;password&quot;)&#10;        val user = userRepository.getUserById(userId!!)&#10;        assertNotNull(user)&#10;        assertEquals(&quot;testuser&quot;, user.userName)&#10;    }&#10;&#10;    @Test&#10;    fun testGetUserById_invalidId() = runBlocking {&#10;        val user = userRepository.getUserById(999L)&#10;        assertNull(user)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>